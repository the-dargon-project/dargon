
                                                                                                                        // <auto-generated/>
                                                                                                                        using System;
                                                                                                                        using System.Numerics;
                                                                                                                        using Dargon.Commons;
                                                                                                                        using Dargon.Vox2;
                                                                                                                        

                                                                                                                        namespace Dargon.Vox2 {
                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class SimpleTestTypeVoxConstants {
                                                                                                                              public const int SimpleTypeId = -2147483647;
                                                                                                                              public static SimpleTestTypeSerializer Serializer => SimpleTestTypeSerializer.Instance;
                                                                                                                              public static readonly byte[] SimpleTypeIdBytes = SimpleTypeId.ToVariableIntBytes();
                                                                                                                           }

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           [VoxType(SimpleTestTypeVoxConstants.SimpleTypeId, VanityRedirectFromType = typeof(Dargon.Vox2.SimpleTestType))]
                                                                                                                           public sealed partial class SimpleTestTypeSerializer : IVoxSerializer<SimpleTestType> {
                                                                                                                              public static readonly SimpleTestTypeSerializer Instance = new();

                                                                                                                              public int SimpleTypeId => SimpleTestTypeVoxConstants.SimpleTypeId;
                                                                                                                              public int[] FullTypeId { get; } = new[] { SimpleTestTypeVoxConstants.SimpleTypeId };
                                                                                                                              public byte[] FullTypeIdBytes { get; } = SimpleTestTypeVoxConstants.SimpleTypeIdBytes;

                                                                                                                              public bool IsUpdatable => true;

                                                                                                                              public void WriteTypeIdBytes(VoxWriter writer) => writer.WriteTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void AssertReadTypeId(VoxReader reader) => reader.AssertReadTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void WriteFull(VoxWriter writer, ref SimpleTestType self) { SimpleTestTypeSerializer.Instance.WriteTypeIdBytes(writer); WriteRaw(writer, ref self);
 }
                                                                                                                              public void WriteRaw(VoxWriter writer, ref SimpleTestType self) { 
                                                                                                                                  {
writer.WriteRawInt32(self.i);

                                                                                                                                  }

                                                                                                                                  {
writer.WriteRawString(self.s);

                                                                                                                                  }
 }
               

                                                                                                                              public SimpleTestType ReadFull(VoxReader reader) { SimpleTestType res = new(); ReadFullIntoRef(reader, ref res); return res; }
                                                                                                                              public SimpleTestType ReadRaw(VoxReader reader) { SimpleTestType res = new(); ReadRawIntoRef(reader, ref res); return res; }
                                                                                                                              public void ReadFullIntoRef(VoxReader reader, ref SimpleTestType self) { SimpleTestTypeSerializer.Instance.AssertReadTypeId(reader); ReadRawIntoRef(reader, ref self);
 }
                                                                                                                              public void ReadRawIntoRef(VoxReader reader, ref SimpleTestType self) { if (self == null) throw new ArgumentNullException(nameof(SimpleTestType));

                                                                                                                                  {

                                                                                                                                     self.i = reader.ReadRawInt32();
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.s = reader.ReadRawString();
                                                                                                                                  }
 }
                  

                                                                                                                              void IVoxSerializer.WriteRawObject(VoxWriter writer, object val) { SimpleTestType v = (SimpleTestType)val; WriteRaw(writer, ref v); }
                                                                                                                              object IVoxSerializer.ReadRawObject(VoxReader reader) => ReadRaw(reader);
                                                                                                                           }
               

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public partial class SimpleTestType : IVoxCustomType<SimpleTestType> {
                                                                                                                              public SimpleTestTypeSerializer Serializer => SimpleTestTypeSerializer.Instance;
                                                                                                                              IVoxSerializer IVoxCustomType.Serializer => SimpleTestTypeSerializer.Instance;
                                                                                                                              IVoxSerializer<SimpleTestType> IVoxCustomType<SimpleTestType>.Serializer => SimpleTestTypeSerializer.Instance;

                                                                                                                              public void WriteFullInto(VoxWriter writer) { var copy = this; SimpleTestTypeSerializer.Instance.WriteFull(writer, ref copy); }
                                                                                                                              public void WriteRawInto(VoxWriter writer) { var copy = this; SimpleTestTypeSerializer.Instance.WriteRaw(writer, ref copy); }
                  

                                                                                                                              public void ReadFullFrom(VoxReader reader) { var copy = this; SimpleTestTypeSerializer.Instance.ReadFullIntoRef(reader, ref copy); }
                                                                                                                              public void ReadRawFrom(VoxReader reader) { var copy = this; SimpleTestTypeSerializer.Instance.ReadRawIntoRef(reader, ref copy); }
                     

                                                                                                                           }


                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class VoxGenerated_SimpleTestTypeStatics {
                                                                                                                              public static void WriteFullSimpleTestType(this VoxWriter writer, SimpleTestType value) { var copy = value; SimpleTestTypeSerializer.Instance.WriteFull(writer, ref value); }
                                                                                                                              public static void WriteRawSimpleTestType(this VoxWriter writer, SimpleTestType value) { var copy = value; SimpleTestTypeSerializer.Instance.WriteRaw(writer, ref value); }
                                                                                                                              public static SimpleTestType ReadFullSimpleTestType(this VoxReader reader) => SimpleTestTypeSerializer.Instance.ReadFull(reader);
                                                                                                                              public static SimpleTestType ReadRawSimpleTestType(this VoxReader reader) => SimpleTestTypeSerializer.Instance.ReadRaw(reader);
                                                                                                                           }
                                                                                                                        }

                                                                                                                        namespace Dargon.Vox2 {
               

                                                                                                                        }

                                                                                                                        namespace Dargon.Vox2 {
                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class HodgepodgeMinVoxConstants {
                                                                                                                              public const int SimpleTypeId = -2147483646;
                                                                                                                              public static HodgepodgeMinSerializer Serializer => HodgepodgeMinSerializer.Instance;
                                                                                                                              public static readonly byte[] SimpleTypeIdBytes = SimpleTypeId.ToVariableIntBytes();
                                                                                                                           }

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           [VoxType(HodgepodgeMinVoxConstants.SimpleTypeId, VanityRedirectFromType = typeof(Dargon.Vox2.HodgepodgeMin))]
                                                                                                                           public sealed partial class HodgepodgeMinSerializer : IVoxSerializer<HodgepodgeMin> {
                                                                                                                              public static readonly HodgepodgeMinSerializer Instance = new();

                                                                                                                              public int SimpleTypeId => HodgepodgeMinVoxConstants.SimpleTypeId;
                                                                                                                              public int[] FullTypeId { get; } = new[] { HodgepodgeMinVoxConstants.SimpleTypeId };
                                                                                                                              public byte[] FullTypeIdBytes { get; } = HodgepodgeMinVoxConstants.SimpleTypeIdBytes;

                                                                                                                              public bool IsUpdatable => true;

                                                                                                                              public void WriteTypeIdBytes(VoxWriter writer) => writer.WriteTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void AssertReadTypeId(VoxReader reader) => reader.AssertReadTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void WriteFull(VoxWriter writer, ref HodgepodgeMin self) { HodgepodgeMinSerializer.Instance.WriteTypeIdBytes(writer); WriteRaw(writer, ref self);
 }
                                                                                                                              public void WriteRaw(VoxWriter writer, ref HodgepodgeMin self) { 
                                                                                                                                  {
writer.WriteRawSByte(self.Int8);

                                                                                                                                  }

                                                                                                                                  {
writer.WriteRawInt16(self.Int16);

                                                                                                                                  }

                                                                                                                                  {
writer.WriteRawInt32(self.Int32);

                                                                                                                                  }

                                                                                                                                  {
writer.WriteRawInt64(self.Int64);

                                                                                                                                  }

                                                                                                                                  {
writer.WriteRawByte(self.UInt8);

                                                                                                                                  }

                                                                                                                                  {
writer.WriteRawUInt16(self.UInt16);

                                                                                                                                  }

                                                                                                                                  {
writer.WriteRawUInt32(self.UInt32);

                                                                                                                                  }

                                                                                                                                  {
writer.WriteRawUInt64(self.UInt64);

                                                                                                                                  }

                                                                                                                                  {
writer.WriteRawString(self.NullString);

                                                                                                                                  }

                                                                                                                                  {
writer.WriteRawString(self.String);

                                                                                                                                  }

                                                                                                                                  {
writer.WriteRawGuid(self.Guid);

                                                                                                                                  }

                                                                                                                                  {
var _voxvarname_arr = self.IntArray;
if (_voxvarname_arr == null) {
   writer.WriteRawInt32((int)-1);
} else {
   writer.WriteRawInt32(_voxvarname_arr.Length);
   for (var _voxvarname_arr_i = 0; _voxvarname_arr_i < _voxvarname_arr.Length; _voxvarname_arr_i++) {
      writer.WriteRawInt32(_voxvarname_arr[_voxvarname_arr_i]);
   }
}

                                                                                                                                  }

                                                                                                                                  {
var _voxvarname_arr = self.IntList;
if (_voxvarname_arr == null) {
   writer.WriteRawInt32((int)-1);
} else {
   writer.WriteRawInt32(_voxvarname_arr.Count);
   foreach (var _voxvarname_arr_el in _voxvarname_arr) {
      writer.WriteRawInt32(_voxvarname_arr_el);
   }
}

                                                                                                                                  }

                                                                                                                                  {
var _voxvarname_arr = self.IntHashSet;
if (_voxvarname_arr == null) {
   writer.WriteRawInt32((int)-1);
} else {
   writer.WriteRawInt32(_voxvarname_arr.Count);
   foreach (var _voxvarname_arr_el in _voxvarname_arr) {
      writer.WriteRawInt32(_voxvarname_arr_el);
   }
}

                                                                                                                                  }

                                                                                                                                  {
var _voxvarname_dict = self.DictOfIntToArrayOfArrayOfDictOfObjectToIntArray;
if (_voxvarname_dict == null) {
   writer.WriteRawInt32((int)-1);
} else {
   writer.WriteRawInt32(_voxvarname_dict.Count);
   foreach (var _voxvarname_dict_kvp in _voxvarname_dict) {
      writer.WriteRawInt32(_voxvarname_dict_kvp.Key);
      var _voxvarname_dict_value_arr = _voxvarname_dict_kvp.Value;
      if (_voxvarname_dict_value_arr == null) {
         writer.WriteRawInt32((int)-1);
      } else {
         writer.WriteRawInt32(_voxvarname_dict_value_arr.Length);
         for (var _voxvarname_dict_value_arr_i = 0; _voxvarname_dict_value_arr_i < _voxvarname_dict_value_arr.Length; _voxvarname_dict_value_arr_i++) {
            var _voxvarname_dict_value_arr_el_arr = _voxvarname_dict_value_arr[_voxvarname_dict_value_arr_i];
            if (_voxvarname_dict_value_arr_el_arr == null) {
               writer.WriteRawInt32((int)-1);
            } else {
               writer.WriteRawInt32(_voxvarname_dict_value_arr_el_arr.Length);
               for (var _voxvarname_dict_value_arr_el_arr_i = 0; _voxvarname_dict_value_arr_el_arr_i < _voxvarname_dict_value_arr_el_arr.Length; _voxvarname_dict_value_arr_el_arr_i++) {
                  var _voxvarname_dict_value_arr_el_arr_el_dict = _voxvarname_dict_value_arr_el_arr[_voxvarname_dict_value_arr_el_arr_i];
                  if (_voxvarname_dict_value_arr_el_arr_el_dict == null) {
                     writer.WriteRawInt32((int)-1);
                  } else {
                     writer.WriteRawInt32(_voxvarname_dict_value_arr_el_arr_el_dict.Count);
                     foreach (var _voxvarname_dict_value_arr_el_arr_el_dict_kvp in _voxvarname_dict_value_arr_el_arr_el_dict) {
                        writer.WritePolymorphic<object>(_voxvarname_dict_value_arr_el_arr_el_dict_kvp.Key);
                        var _voxvarname_dict_value_arr_el_arr_el_dict_value_arr = _voxvarname_dict_value_arr_el_arr_el_dict_kvp.Value;
                        if (_voxvarname_dict_value_arr_el_arr_el_dict_value_arr == null) {
                           writer.WriteRawInt32((int)-1);
                        } else {
                           writer.WriteRawInt32(_voxvarname_dict_value_arr_el_arr_el_dict_value_arr.Length);
                           for (var _voxvarname_dict_value_arr_el_arr_el_dict_value_arr_i = 0; _voxvarname_dict_value_arr_el_arr_el_dict_value_arr_i < _voxvarname_dict_value_arr_el_arr_el_dict_value_arr.Length; _voxvarname_dict_value_arr_el_arr_el_dict_value_arr_i++) {
                              writer.WriteRawInt32(_voxvarname_dict_value_arr_el_arr_el_dict_value_arr[_voxvarname_dict_value_arr_el_arr_el_dict_value_arr_i]);
                           }
                        }
                     }
                  }
               }
            }
         }
      }
   }
}

                                                                                                                                  }

                                                                                                                                  {
var _voxvarname_arr = self.NullIntArray;
if (_voxvarname_arr == null) {
   writer.WriteRawInt32((int)-1);
} else {
   writer.WriteRawInt32(_voxvarname_arr.Length);
   for (var _voxvarname_arr_i = 0; _voxvarname_arr_i < _voxvarname_arr.Length; _voxvarname_arr_i++) {
      writer.WriteRawInt32(_voxvarname_arr[_voxvarname_arr_i]);
   }
}

                                                                                                                                  }

                                                                                                                                  {
var _voxvarname_arr = self.NullIntList;
if (_voxvarname_arr == null) {
   writer.WriteRawInt32((int)-1);
} else {
   writer.WriteRawInt32(_voxvarname_arr.Count);
   foreach (var _voxvarname_arr_el in _voxvarname_arr) {
      writer.WriteRawInt32(_voxvarname_arr_el);
   }
}

                                                                                                                                  }

                                                                                                                                  {
var _voxvarname_arr = self.NullIntHashSet;
if (_voxvarname_arr == null) {
   writer.WriteRawInt32((int)-1);
} else {
   writer.WriteRawInt32(_voxvarname_arr.Count);
   foreach (var _voxvarname_arr_el in _voxvarname_arr) {
      writer.WriteRawInt32(_voxvarname_arr_el);
   }
}

                                                                                                                                  }

                                                                                                                                  {
var _voxvarname_dict = self.NullDictOfIntToArrayOfArrayOfDictOfObjectToIntArray;
if (_voxvarname_dict == null) {
   writer.WriteRawInt32((int)-1);
} else {
   writer.WriteRawInt32(_voxvarname_dict.Count);
   foreach (var _voxvarname_dict_kvp in _voxvarname_dict) {
      writer.WriteRawInt32(_voxvarname_dict_kvp.Key);
      var _voxvarname_dict_value_arr = _voxvarname_dict_kvp.Value;
      if (_voxvarname_dict_value_arr == null) {
         writer.WriteRawInt32((int)-1);
      } else {
         writer.WriteRawInt32(_voxvarname_dict_value_arr.Length);
         for (var _voxvarname_dict_value_arr_i = 0; _voxvarname_dict_value_arr_i < _voxvarname_dict_value_arr.Length; _voxvarname_dict_value_arr_i++) {
            var _voxvarname_dict_value_arr_el_arr = _voxvarname_dict_value_arr[_voxvarname_dict_value_arr_i];
            if (_voxvarname_dict_value_arr_el_arr == null) {
               writer.WriteRawInt32((int)-1);
            } else {
               writer.WriteRawInt32(_voxvarname_dict_value_arr_el_arr.Length);
               for (var _voxvarname_dict_value_arr_el_arr_i = 0; _voxvarname_dict_value_arr_el_arr_i < _voxvarname_dict_value_arr_el_arr.Length; _voxvarname_dict_value_arr_el_arr_i++) {
                  var _voxvarname_dict_value_arr_el_arr_el_dict = _voxvarname_dict_value_arr_el_arr[_voxvarname_dict_value_arr_el_arr_i];
                  if (_voxvarname_dict_value_arr_el_arr_el_dict == null) {
                     writer.WriteRawInt32((int)-1);
                  } else {
                     writer.WriteRawInt32(_voxvarname_dict_value_arr_el_arr_el_dict.Count);
                     foreach (var _voxvarname_dict_value_arr_el_arr_el_dict_kvp in _voxvarname_dict_value_arr_el_arr_el_dict) {
                        writer.WritePolymorphic<object>(_voxvarname_dict_value_arr_el_arr_el_dict_kvp.Key);
                        var _voxvarname_dict_value_arr_el_arr_el_dict_value_arr = _voxvarname_dict_value_arr_el_arr_el_dict_kvp.Value;
                        if (_voxvarname_dict_value_arr_el_arr_el_dict_value_arr == null) {
                           writer.WriteRawInt32((int)-1);
                        } else {
                           writer.WriteRawInt32(_voxvarname_dict_value_arr_el_arr_el_dict_value_arr.Length);
                           for (var _voxvarname_dict_value_arr_el_arr_el_dict_value_arr_i = 0; _voxvarname_dict_value_arr_el_arr_el_dict_value_arr_i < _voxvarname_dict_value_arr_el_arr_el_dict_value_arr.Length; _voxvarname_dict_value_arr_el_arr_el_dict_value_arr_i++) {
                              writer.WriteRawInt32(_voxvarname_dict_value_arr_el_arr_el_dict_value_arr[_voxvarname_dict_value_arr_el_arr_el_dict_value_arr_i]);
                           }
                        }
                     }
                  }
               }
            }
         }
      }
   }
}

                                                                                                                                  }

                                                                                                                                  {
writer.WritePolymorphic<object?>(self.PolymorphicNull);

                                                                                                                                  }

                                                                                                                                  {
writer.WritePolymorphic<object>(self.PolymorphicString);

                                                                                                                                  }

                                                                                                                                  {
writer.WritePolymorphic<object>(self.PolymorphicIntArray);

                                                                                                                                  }

                                                                                                                                  {
writer.WritePolymorphic<object>(self.PolymorphicIntList);

                                                                                                                                  }

                                                                                                                                  {
writer.WritePolymorphic<object>(self.PolymorphicIntHashSet);

                                                                                                                                  }

                                                                                                                                  {
writer.WritePolymorphic<object>(self.PolymorphicIntToIntArrayDict);

                                                                                                                                  }

                                                                                                                                  {
var _voxvarname_tuple = self.Tuple;
   writer.WriteRawInt32(_voxvarname_tuple.Item1);
   writer.WriteRawString(_voxvarname_tuple.Item2);

                                                                                                                                  }

                                                                                                                                  {
writer.WriteRawType(self.TypeInt);

                                                                                                                                  }

                                                                                                                                  {
writer.WriteRawType(self.TypeIntArray);

                                                                                                                                  }

                                                                                                                                  {
writer.WriteRawType(self.TypeDictOfIntToArrayOfArrayOfDictOfObjectToIntArray);

                                                                                                                                  }

                                                                                                                                  {
writer.WriteRawType(self.NullType);

                                                                                                                                  }

                                                                                                                                  {
writer.WritePolymorphic<object>(self.PolymorphicType);

                                                                                                                                  }

                                                                                                                                  {
writer.WriteRawVector2(self.Vector2);

                                                                                                                                  }

                                                                                                                                  {
writer.WriteRawVector3(self.Vector3);

                                                                                                                                  }

                                                                                                                                  {
writer.WriteRawVector4(self.Vector4);

                                                                                                                                  }

                                                                                                                                  {
writer.WritePolymorphic<System.Numerics.Vector2?>(self.NullNullableVector2);

                                                                                                                                  }

                                                                                                                                  {
writer.WritePolymorphic<System.Numerics.Vector2?>(self.NonNullNullableVector2);

                                                                                                                                  }

                                                                                                                                  {
writer.WriteRawDateTime(self.DateTime);

                                                                                                                                  }

                                                                                                                                  {
writer.WriteRawDateTimeOffset(self.DateTimeOffset);

                                                                                                                                  }

                                                                                                                                  {
writer.WriteRawTimeSpan(self.TimeSpan);

                                                                                                                                  }

                                                                                                                                  {
writer.WritePolymorphic<Dargon.Vox2.HodgepodgeMin?>(self.Inner);

                                                                                                                                  }
 }
               

                                                                                                                              public HodgepodgeMin ReadFull(VoxReader reader) { HodgepodgeMin res = new(); ReadFullIntoRef(reader, ref res); return res; }
                                                                                                                              public HodgepodgeMin ReadRaw(VoxReader reader) { HodgepodgeMin res = new(); ReadRawIntoRef(reader, ref res); return res; }
                                                                                                                              public void ReadFullIntoRef(VoxReader reader, ref HodgepodgeMin self) { HodgepodgeMinSerializer.Instance.AssertReadTypeId(reader); ReadRawIntoRef(reader, ref self);
 }
                                                                                                                              public void ReadRawIntoRef(VoxReader reader, ref HodgepodgeMin self) { if (self == null) throw new ArgumentNullException(nameof(HodgepodgeMin));

                                                                                                                                  {

                                                                                                                                     self.Int8 = reader.ReadRawSByte();
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.Int16 = reader.ReadRawInt16();
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.Int32 = reader.ReadRawInt32();
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.Int64 = reader.ReadRawInt64();
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.UInt8 = reader.ReadRawByte();
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.UInt16 = reader.ReadRawUInt16();
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.UInt32 = reader.ReadRawUInt32();
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.UInt64 = reader.ReadRawUInt64();
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.NullString = reader.ReadRawString();
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.String = reader.ReadRawString();
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.Guid = reader.ReadRawGuid();
                                                                                                                                  }

                                                                                                                                  {
var _voxvarname_arr_count = reader.ReadRawInt32();
var _voxvarname_arr = _voxvarname_arr_count == -1 ? null : new int[_voxvarname_arr_count];
for (var _voxvarname_arr_i = 0; _voxvarname_arr_i < _voxvarname_arr_count; _voxvarname_arr_i++) {
   _voxvarname_arr[_voxvarname_arr_i] = reader.ReadRawInt32();
}

                                                                                                                                     self.IntArray = _voxvarname_arr;
                                                                                                                                  }

                                                                                                                                  {
var _voxvarname_arr_count = reader.ReadRawInt32();
var _voxvarname_arr = _voxvarname_arr_count == -1 ? null : new System.Collections.Generic.List<int>(_voxvarname_arr_count);
for (var _voxvarname_arr_i = 0; _voxvarname_arr_i < _voxvarname_arr_count; _voxvarname_arr_i++) {
   _voxvarname_arr.Add(reader.ReadRawInt32());
}

                                                                                                                                     self.IntList = _voxvarname_arr;
                                                                                                                                  }

                                                                                                                                  {
var _voxvarname_arr_count = reader.ReadRawInt32();
var _voxvarname_arr = _voxvarname_arr_count == -1 ? null : new System.Collections.Generic.HashSet<int>(_voxvarname_arr_count);
for (var _voxvarname_arr_i = 0; _voxvarname_arr_i < _voxvarname_arr_count; _voxvarname_arr_i++) {
   _voxvarname_arr.Add(reader.ReadRawInt32());
}

                                                                                                                                     self.IntHashSet = _voxvarname_arr;
                                                                                                                                  }

                                                                                                                                  {
var _voxvarname_dict_count = reader.ReadRawInt32();
var _voxvarname_dict = _voxvarname_dict_count == -1 ? null : new System.Collections.Generic.Dictionary<int, System.Collections.Generic.Dictionary<object, int[]>[][]>(_voxvarname_dict_count);
for (var _voxvarname_dict_i = 0; _voxvarname_dict_i < _voxvarname_dict_count; _voxvarname_dict_i++) {
   var _voxvarname_dict_key = reader.ReadRawInt32();
   var _voxvarname_dict_val_arr_count = reader.ReadRawInt32();
   var _voxvarname_dict_val_arr = _voxvarname_dict_val_arr_count == -1 ? null : new System.Collections.Generic.Dictionary<object, int[]>[_voxvarname_dict_val_arr_count][];
   for (var _voxvarname_dict_val_arr_i = 0; _voxvarname_dict_val_arr_i < _voxvarname_dict_val_arr_count; _voxvarname_dict_val_arr_i++) {
      var _voxvarname_dict_val_arr_el_arr_count = reader.ReadRawInt32();
      var _voxvarname_dict_val_arr_el_arr = _voxvarname_dict_val_arr_el_arr_count == -1 ? null : new System.Collections.Generic.Dictionary<object, int[]>[_voxvarname_dict_val_arr_el_arr_count];
      for (var _voxvarname_dict_val_arr_el_arr_i = 0; _voxvarname_dict_val_arr_el_arr_i < _voxvarname_dict_val_arr_el_arr_count; _voxvarname_dict_val_arr_el_arr_i++) {
         var _voxvarname_dict_val_arr_el_arr_el_dict_count = reader.ReadRawInt32();
         var _voxvarname_dict_val_arr_el_arr_el_dict = _voxvarname_dict_val_arr_el_arr_el_dict_count == -1 ? null : new System.Collections.Generic.Dictionary<object, int[]>(_voxvarname_dict_val_arr_el_arr_el_dict_count);
         for (var _voxvarname_dict_val_arr_el_arr_el_dict_i = 0; _voxvarname_dict_val_arr_el_arr_el_dict_i < _voxvarname_dict_val_arr_el_arr_el_dict_count; _voxvarname_dict_val_arr_el_arr_el_dict_i++) {
            var _voxvarname_dict_val_arr_el_arr_el_dict_key = reader.ReadPolymorphic<object>();
            var _voxvarname_dict_val_arr_el_arr_el_dict_val_arr_count = reader.ReadRawInt32();
            var _voxvarname_dict_val_arr_el_arr_el_dict_val_arr = _voxvarname_dict_val_arr_el_arr_el_dict_val_arr_count == -1 ? null : new int[_voxvarname_dict_val_arr_el_arr_el_dict_val_arr_count];
            for (var _voxvarname_dict_val_arr_el_arr_el_dict_val_arr_i = 0; _voxvarname_dict_val_arr_el_arr_el_dict_val_arr_i < _voxvarname_dict_val_arr_el_arr_el_dict_val_arr_count; _voxvarname_dict_val_arr_el_arr_el_dict_val_arr_i++) {
               _voxvarname_dict_val_arr_el_arr_el_dict_val_arr[_voxvarname_dict_val_arr_el_arr_el_dict_val_arr_i] = reader.ReadRawInt32();
            }
            var _voxvarname_dict_val_arr_el_arr_el_dict_val = _voxvarname_dict_val_arr_el_arr_el_dict_val_arr;
            _voxvarname_dict_val_arr_el_arr_el_dict.Add(_voxvarname_dict_val_arr_el_arr_el_dict_key, _voxvarname_dict_val_arr_el_arr_el_dict_val);
         }
         _voxvarname_dict_val_arr_el_arr[_voxvarname_dict_val_arr_el_arr_i] = _voxvarname_dict_val_arr_el_arr_el_dict;
      }
      _voxvarname_dict_val_arr[_voxvarname_dict_val_arr_i] = _voxvarname_dict_val_arr_el_arr;
   }
   var _voxvarname_dict_val = _voxvarname_dict_val_arr;
   _voxvarname_dict.Add(_voxvarname_dict_key, _voxvarname_dict_val);
}

                                                                                                                                     self.DictOfIntToArrayOfArrayOfDictOfObjectToIntArray = _voxvarname_dict;
                                                                                                                                  }

                                                                                                                                  {
var _voxvarname_arr_count = reader.ReadRawInt32();
var _voxvarname_arr = _voxvarname_arr_count == -1 ? null : new int[_voxvarname_arr_count];
for (var _voxvarname_arr_i = 0; _voxvarname_arr_i < _voxvarname_arr_count; _voxvarname_arr_i++) {
   _voxvarname_arr[_voxvarname_arr_i] = reader.ReadRawInt32();
}

                                                                                                                                     self.NullIntArray = _voxvarname_arr;
                                                                                                                                  }

                                                                                                                                  {
var _voxvarname_arr_count = reader.ReadRawInt32();
var _voxvarname_arr = _voxvarname_arr_count == -1 ? null : new System.Collections.Generic.List<int>(_voxvarname_arr_count);
for (var _voxvarname_arr_i = 0; _voxvarname_arr_i < _voxvarname_arr_count; _voxvarname_arr_i++) {
   _voxvarname_arr.Add(reader.ReadRawInt32());
}

                                                                                                                                     self.NullIntList = _voxvarname_arr;
                                                                                                                                  }

                                                                                                                                  {
var _voxvarname_arr_count = reader.ReadRawInt32();
var _voxvarname_arr = _voxvarname_arr_count == -1 ? null : new System.Collections.Generic.HashSet<int>(_voxvarname_arr_count);
for (var _voxvarname_arr_i = 0; _voxvarname_arr_i < _voxvarname_arr_count; _voxvarname_arr_i++) {
   _voxvarname_arr.Add(reader.ReadRawInt32());
}

                                                                                                                                     self.NullIntHashSet = _voxvarname_arr;
                                                                                                                                  }

                                                                                                                                  {
var _voxvarname_dict_count = reader.ReadRawInt32();
var _voxvarname_dict = _voxvarname_dict_count == -1 ? null : new System.Collections.Generic.Dictionary<int, System.Collections.Generic.Dictionary<object, int[]>[][]>(_voxvarname_dict_count);
for (var _voxvarname_dict_i = 0; _voxvarname_dict_i < _voxvarname_dict_count; _voxvarname_dict_i++) {
   var _voxvarname_dict_key = reader.ReadRawInt32();
   var _voxvarname_dict_val_arr_count = reader.ReadRawInt32();
   var _voxvarname_dict_val_arr = _voxvarname_dict_val_arr_count == -1 ? null : new System.Collections.Generic.Dictionary<object, int[]>[_voxvarname_dict_val_arr_count][];
   for (var _voxvarname_dict_val_arr_i = 0; _voxvarname_dict_val_arr_i < _voxvarname_dict_val_arr_count; _voxvarname_dict_val_arr_i++) {
      var _voxvarname_dict_val_arr_el_arr_count = reader.ReadRawInt32();
      var _voxvarname_dict_val_arr_el_arr = _voxvarname_dict_val_arr_el_arr_count == -1 ? null : new System.Collections.Generic.Dictionary<object, int[]>[_voxvarname_dict_val_arr_el_arr_count];
      for (var _voxvarname_dict_val_arr_el_arr_i = 0; _voxvarname_dict_val_arr_el_arr_i < _voxvarname_dict_val_arr_el_arr_count; _voxvarname_dict_val_arr_el_arr_i++) {
         var _voxvarname_dict_val_arr_el_arr_el_dict_count = reader.ReadRawInt32();
         var _voxvarname_dict_val_arr_el_arr_el_dict = _voxvarname_dict_val_arr_el_arr_el_dict_count == -1 ? null : new System.Collections.Generic.Dictionary<object, int[]>(_voxvarname_dict_val_arr_el_arr_el_dict_count);
         for (var _voxvarname_dict_val_arr_el_arr_el_dict_i = 0; _voxvarname_dict_val_arr_el_arr_el_dict_i < _voxvarname_dict_val_arr_el_arr_el_dict_count; _voxvarname_dict_val_arr_el_arr_el_dict_i++) {
            var _voxvarname_dict_val_arr_el_arr_el_dict_key = reader.ReadPolymorphic<object>();
            var _voxvarname_dict_val_arr_el_arr_el_dict_val_arr_count = reader.ReadRawInt32();
            var _voxvarname_dict_val_arr_el_arr_el_dict_val_arr = _voxvarname_dict_val_arr_el_arr_el_dict_val_arr_count == -1 ? null : new int[_voxvarname_dict_val_arr_el_arr_el_dict_val_arr_count];
            for (var _voxvarname_dict_val_arr_el_arr_el_dict_val_arr_i = 0; _voxvarname_dict_val_arr_el_arr_el_dict_val_arr_i < _voxvarname_dict_val_arr_el_arr_el_dict_val_arr_count; _voxvarname_dict_val_arr_el_arr_el_dict_val_arr_i++) {
               _voxvarname_dict_val_arr_el_arr_el_dict_val_arr[_voxvarname_dict_val_arr_el_arr_el_dict_val_arr_i] = reader.ReadRawInt32();
            }
            var _voxvarname_dict_val_arr_el_arr_el_dict_val = _voxvarname_dict_val_arr_el_arr_el_dict_val_arr;
            _voxvarname_dict_val_arr_el_arr_el_dict.Add(_voxvarname_dict_val_arr_el_arr_el_dict_key, _voxvarname_dict_val_arr_el_arr_el_dict_val);
         }
         _voxvarname_dict_val_arr_el_arr[_voxvarname_dict_val_arr_el_arr_i] = _voxvarname_dict_val_arr_el_arr_el_dict;
      }
      _voxvarname_dict_val_arr[_voxvarname_dict_val_arr_i] = _voxvarname_dict_val_arr_el_arr;
   }
   var _voxvarname_dict_val = _voxvarname_dict_val_arr;
   _voxvarname_dict.Add(_voxvarname_dict_key, _voxvarname_dict_val);
}

                                                                                                                                     self.NullDictOfIntToArrayOfArrayOfDictOfObjectToIntArray = _voxvarname_dict;
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.PolymorphicNull = reader.ReadPolymorphic<object?>();
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.PolymorphicString = reader.ReadPolymorphic<object>();
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.PolymorphicIntArray = reader.ReadPolymorphic<object>();
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.PolymorphicIntList = reader.ReadPolymorphic<object>();
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.PolymorphicIntHashSet = reader.ReadPolymorphic<object>();
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.PolymorphicIntToIntArrayDict = reader.ReadPolymorphic<object>();
                                                                                                                                  }

                                                                                                                                  {
var _voxvarname_tuple_item_0_res = reader.ReadRawInt32();
var _voxvarname_tuple_item_1_res = reader.ReadRawString();
var _voxvarname_tuple = (Item1: _voxvarname_tuple_item_0_res, Item2: _voxvarname_tuple_item_1_res);

                                                                                                                                     self.Tuple = _voxvarname_tuple;
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.TypeInt = reader.ReadRawType();
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.TypeIntArray = reader.ReadRawType();
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.TypeDictOfIntToArrayOfArrayOfDictOfObjectToIntArray = reader.ReadRawType();
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.NullType = reader.ReadRawType();
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.PolymorphicType = reader.ReadPolymorphic<object>();
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.Vector2 = reader.ReadRawVector2();
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.Vector3 = reader.ReadRawVector3();
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.Vector4 = reader.ReadRawVector4();
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.NullNullableVector2 = reader.ReadPolymorphic<System.Numerics.Vector2?>();
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.NonNullNullableVector2 = reader.ReadPolymorphic<System.Numerics.Vector2?>();
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.DateTime = reader.ReadRawDateTime();
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.DateTimeOffset = reader.ReadRawDateTimeOffset();
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.TimeSpan = reader.ReadRawTimeSpan();
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.Inner = reader.ReadPolymorphic<Dargon.Vox2.HodgepodgeMin?>();
                                                                                                                                  }
 }
                  

                                                                                                                              void IVoxSerializer.WriteRawObject(VoxWriter writer, object val) { HodgepodgeMin v = (HodgepodgeMin)val; WriteRaw(writer, ref v); }
                                                                                                                              object IVoxSerializer.ReadRawObject(VoxReader reader) => ReadRaw(reader);
                                                                                                                           }
               

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public partial class HodgepodgeMin : IVoxCustomType<HodgepodgeMin> {
                                                                                                                              public HodgepodgeMinSerializer Serializer => HodgepodgeMinSerializer.Instance;
                                                                                                                              IVoxSerializer IVoxCustomType.Serializer => HodgepodgeMinSerializer.Instance;
                                                                                                                              IVoxSerializer<HodgepodgeMin> IVoxCustomType<HodgepodgeMin>.Serializer => HodgepodgeMinSerializer.Instance;

                                                                                                                              public void WriteFullInto(VoxWriter writer) { var copy = this; HodgepodgeMinSerializer.Instance.WriteFull(writer, ref copy); }
                                                                                                                              public void WriteRawInto(VoxWriter writer) { var copy = this; HodgepodgeMinSerializer.Instance.WriteRaw(writer, ref copy); }
                  

                                                                                                                              public void ReadFullFrom(VoxReader reader) { var copy = this; HodgepodgeMinSerializer.Instance.ReadFullIntoRef(reader, ref copy); }
                                                                                                                              public void ReadRawFrom(VoxReader reader) { var copy = this; HodgepodgeMinSerializer.Instance.ReadRawIntoRef(reader, ref copy); }
                     

                                                                                                                           }


                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class VoxGenerated_HodgepodgeMinStatics {
                                                                                                                              public static void WriteFullHodgepodgeMin(this VoxWriter writer, HodgepodgeMin value) { var copy = value; HodgepodgeMinSerializer.Instance.WriteFull(writer, ref value); }
                                                                                                                              public static void WriteRawHodgepodgeMin(this VoxWriter writer, HodgepodgeMin value) { var copy = value; HodgepodgeMinSerializer.Instance.WriteRaw(writer, ref value); }
                                                                                                                              public static HodgepodgeMin ReadFullHodgepodgeMin(this VoxReader reader) => HodgepodgeMinSerializer.Instance.ReadFull(reader);
                                                                                                                              public static HodgepodgeMin ReadRawHodgepodgeMin(this VoxReader reader) => HodgepodgeMinSerializer.Instance.ReadRaw(reader);
                                                                                                                           }
                                                                                                                        }

                                                                                                                        namespace Dargon.Vox2 {
               

                                                                                                                        }

                                                                                                                        namespace System {
                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class SByteVoxConstants {
                                                                                                                              public const int SimpleTypeId = -19;
                                                                                                                              public static SByteSerializer Serializer => SByteSerializer.Instance;
                                                                                                                              public static readonly byte[] SimpleTypeIdBytes = SimpleTypeId.ToVariableIntBytes();
                                                                                                                           }

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           [VoxType(SByteVoxConstants.SimpleTypeId, VanityRedirectFromType = typeof(Dargon.Vox2.VoxGeneration_Int8))]
                                                                                                                           public sealed partial class SByteSerializer : IVoxSerializer<SByte> {
                                                                                                                              public static readonly SByteSerializer Instance = new();

                                                                                                                              public int SimpleTypeId => SByteVoxConstants.SimpleTypeId;
                                                                                                                              public int[] FullTypeId { get; } = new[] { SByteVoxConstants.SimpleTypeId };
                                                                                                                              public byte[] FullTypeIdBytes { get; } = SByteVoxConstants.SimpleTypeIdBytes;

                                                                                                                              public bool IsUpdatable => false;

                                                                                                                              public void WriteTypeIdBytes(VoxWriter writer) => writer.WriteTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void AssertReadTypeId(VoxReader reader) => reader.AssertReadTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void WriteFull(VoxWriter writer, ref SByte self) { SByteSerializer.Instance.WriteTypeIdBytes(writer); WriteRaw(writer, ref self);
 }
                                                                                                                              public void WriteRaw(VoxWriter writer, ref SByte self) { global::Dargon.Vox2.VoxGeneration_Int8.Stub_WriteRaw_SByte(writer, self);
 }
               

                                                                                                                              public SByte ReadFull(VoxReader reader) { SByteSerializer.Instance.AssertReadTypeId(reader); return ReadRaw(reader);
 }
                                                                                                                              public SByte ReadRaw(VoxReader reader) { return global::Dargon.Vox2.VoxGeneration_Int8.Stub_ReadRaw_SByte(reader);
 }
                                                                                                                              public void ReadFullIntoRef(VoxReader reader, ref SByte self) => throw new InvalidOperationException("Reading into SByte ref is not supported.");
                                                                                                                              public void ReadRawIntoRef(VoxReader reader, ref SByte self) => throw new InvalidOperationException("Reading into SByte ref is not supported.");
                  

                                                                                                                              void IVoxSerializer.WriteRawObject(VoxWriter writer, object val) { SByte v = (SByte)val; WriteRaw(writer, ref v); }
                                                                                                                              object IVoxSerializer.ReadRawObject(VoxReader reader) => ReadRaw(reader);
                                                                                                                           }
               


                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class VoxGenerated_SByteStatics {
                                                                                                                              public static void WriteFullSByte(this VoxWriter writer, SByte value) { var copy = value; SByteSerializer.Instance.WriteFull(writer, ref value); }
                                                                                                                              public static void WriteRawSByte(this VoxWriter writer, SByte value) { var copy = value; SByteSerializer.Instance.WriteRaw(writer, ref value); }
                                                                                                                              public static SByte ReadFullSByte(this VoxReader reader) => SByteSerializer.Instance.ReadFull(reader);
                                                                                                                              public static SByte ReadRawSByte(this VoxReader reader) => SByteSerializer.Instance.ReadRaw(reader);
                                                                                                                           }
                                                                                                                        }

                                                                                                                        namespace Dargon.Vox2 {
               

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static partial class VoxGeneration_Int8 {
                                                                                                                              public static partial void Stub_WriteRaw_SByte(VoxWriter writer, SByte value);
public static partial SByte Stub_ReadRaw_SByte(VoxReader reader);
                                                               
                                                                                                                           }

                                                                                                                        }

                                                                                                                        namespace System {
                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class Int16VoxConstants {
                                                                                                                              public const int SimpleTypeId = -20;
                                                                                                                              public static Int16Serializer Serializer => Int16Serializer.Instance;
                                                                                                                              public static readonly byte[] SimpleTypeIdBytes = SimpleTypeId.ToVariableIntBytes();
                                                                                                                           }

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           [VoxType(Int16VoxConstants.SimpleTypeId, VanityRedirectFromType = typeof(Dargon.Vox2.VoxGeneration_Int16))]
                                                                                                                           public sealed partial class Int16Serializer : IVoxSerializer<Int16> {
                                                                                                                              public static readonly Int16Serializer Instance = new();

                                                                                                                              public int SimpleTypeId => Int16VoxConstants.SimpleTypeId;
                                                                                                                              public int[] FullTypeId { get; } = new[] { Int16VoxConstants.SimpleTypeId };
                                                                                                                              public byte[] FullTypeIdBytes { get; } = Int16VoxConstants.SimpleTypeIdBytes;

                                                                                                                              public bool IsUpdatable => false;

                                                                                                                              public void WriteTypeIdBytes(VoxWriter writer) => writer.WriteTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void AssertReadTypeId(VoxReader reader) => reader.AssertReadTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void WriteFull(VoxWriter writer, ref Int16 self) { Int16Serializer.Instance.WriteTypeIdBytes(writer); WriteRaw(writer, ref self);
 }
                                                                                                                              public void WriteRaw(VoxWriter writer, ref Int16 self) { global::Dargon.Vox2.VoxGeneration_Int16.Stub_WriteRaw_Int16(writer, self);
 }
               

                                                                                                                              public Int16 ReadFull(VoxReader reader) { Int16Serializer.Instance.AssertReadTypeId(reader); return ReadRaw(reader);
 }
                                                                                                                              public Int16 ReadRaw(VoxReader reader) { return global::Dargon.Vox2.VoxGeneration_Int16.Stub_ReadRaw_Int16(reader);
 }
                                                                                                                              public void ReadFullIntoRef(VoxReader reader, ref Int16 self) => throw new InvalidOperationException("Reading into Int16 ref is not supported.");
                                                                                                                              public void ReadRawIntoRef(VoxReader reader, ref Int16 self) => throw new InvalidOperationException("Reading into Int16 ref is not supported.");
                  

                                                                                                                              void IVoxSerializer.WriteRawObject(VoxWriter writer, object val) { Int16 v = (Int16)val; WriteRaw(writer, ref v); }
                                                                                                                              object IVoxSerializer.ReadRawObject(VoxReader reader) => ReadRaw(reader);
                                                                                                                           }
               


                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class VoxGenerated_Int16Statics {
                                                                                                                              public static void WriteFullInt16(this VoxWriter writer, Int16 value) { var copy = value; Int16Serializer.Instance.WriteFull(writer, ref value); }
                                                                                                                              public static void WriteRawInt16(this VoxWriter writer, Int16 value) { var copy = value; Int16Serializer.Instance.WriteRaw(writer, ref value); }
                                                                                                                              public static Int16 ReadFullInt16(this VoxReader reader) => Int16Serializer.Instance.ReadFull(reader);
                                                                                                                              public static Int16 ReadRawInt16(this VoxReader reader) => Int16Serializer.Instance.ReadRaw(reader);
                                                                                                                           }
                                                                                                                        }

                                                                                                                        namespace Dargon.Vox2 {
               

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static partial class VoxGeneration_Int16 {
                                                                                                                              public static partial void Stub_WriteRaw_Int16(VoxWriter writer, Int16 value);
public static partial Int16 Stub_ReadRaw_Int16(VoxReader reader);
                                                               
                                                                                                                           }

                                                                                                                        }

                                                                                                                        namespace System {
                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class Int32VoxConstants {
                                                                                                                              public const int SimpleTypeId = -21;
                                                                                                                              public static Int32Serializer Serializer => Int32Serializer.Instance;
                                                                                                                              public static readonly byte[] SimpleTypeIdBytes = SimpleTypeId.ToVariableIntBytes();
                                                                                                                           }

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           [VoxType(Int32VoxConstants.SimpleTypeId, VanityRedirectFromType = typeof(Dargon.Vox2.VoxGeneration_Int32))]
                                                                                                                           public sealed partial class Int32Serializer : IVoxSerializer<Int32> {
                                                                                                                              public static readonly Int32Serializer Instance = new();

                                                                                                                              public int SimpleTypeId => Int32VoxConstants.SimpleTypeId;
                                                                                                                              public int[] FullTypeId { get; } = new[] { Int32VoxConstants.SimpleTypeId };
                                                                                                                              public byte[] FullTypeIdBytes { get; } = Int32VoxConstants.SimpleTypeIdBytes;

                                                                                                                              public bool IsUpdatable => false;

                                                                                                                              public void WriteTypeIdBytes(VoxWriter writer) => writer.WriteTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void AssertReadTypeId(VoxReader reader) => reader.AssertReadTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void WriteFull(VoxWriter writer, ref Int32 self) { Int32Serializer.Instance.WriteTypeIdBytes(writer); WriteRaw(writer, ref self);
 }
                                                                                                                              public void WriteRaw(VoxWriter writer, ref Int32 self) { global::Dargon.Vox2.VoxGeneration_Int32.Stub_WriteRaw_Int32(writer, self);
 }
               

                                                                                                                              public Int32 ReadFull(VoxReader reader) { Int32Serializer.Instance.AssertReadTypeId(reader); return ReadRaw(reader);
 }
                                                                                                                              public Int32 ReadRaw(VoxReader reader) { return global::Dargon.Vox2.VoxGeneration_Int32.Stub_ReadRaw_Int32(reader);
 }
                                                                                                                              public void ReadFullIntoRef(VoxReader reader, ref Int32 self) => throw new InvalidOperationException("Reading into Int32 ref is not supported.");
                                                                                                                              public void ReadRawIntoRef(VoxReader reader, ref Int32 self) => throw new InvalidOperationException("Reading into Int32 ref is not supported.");
                  

                                                                                                                              void IVoxSerializer.WriteRawObject(VoxWriter writer, object val) { Int32 v = (Int32)val; WriteRaw(writer, ref v); }
                                                                                                                              object IVoxSerializer.ReadRawObject(VoxReader reader) => ReadRaw(reader);
                                                                                                                           }
               


                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class VoxGenerated_Int32Statics {
                                                                                                                              public static void WriteFullInt32(this VoxWriter writer, Int32 value) { var copy = value; Int32Serializer.Instance.WriteFull(writer, ref value); }
                                                                                                                              public static void WriteRawInt32(this VoxWriter writer, Int32 value) { var copy = value; Int32Serializer.Instance.WriteRaw(writer, ref value); }
                                                                                                                              public static Int32 ReadFullInt32(this VoxReader reader) => Int32Serializer.Instance.ReadFull(reader);
                                                                                                                              public static Int32 ReadRawInt32(this VoxReader reader) => Int32Serializer.Instance.ReadRaw(reader);
                                                                                                                           }
                                                                                                                        }

                                                                                                                        namespace Dargon.Vox2 {
               

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static partial class VoxGeneration_Int32 {
                                                                                                                              public static partial void Stub_WriteRaw_Int32(VoxWriter writer, Int32 value);
public static partial Int32 Stub_ReadRaw_Int32(VoxReader reader);
                                                               
                                                                                                                           }

                                                                                                                        }

                                                                                                                        namespace System {
                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class Int64VoxConstants {
                                                                                                                              public const int SimpleTypeId = -22;
                                                                                                                              public static Int64Serializer Serializer => Int64Serializer.Instance;
                                                                                                                              public static readonly byte[] SimpleTypeIdBytes = SimpleTypeId.ToVariableIntBytes();
                                                                                                                           }

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           [VoxType(Int64VoxConstants.SimpleTypeId, VanityRedirectFromType = typeof(Dargon.Vox2.VoxGeneration_Int64))]
                                                                                                                           public sealed partial class Int64Serializer : IVoxSerializer<Int64> {
                                                                                                                              public static readonly Int64Serializer Instance = new();

                                                                                                                              public int SimpleTypeId => Int64VoxConstants.SimpleTypeId;
                                                                                                                              public int[] FullTypeId { get; } = new[] { Int64VoxConstants.SimpleTypeId };
                                                                                                                              public byte[] FullTypeIdBytes { get; } = Int64VoxConstants.SimpleTypeIdBytes;

                                                                                                                              public bool IsUpdatable => false;

                                                                                                                              public void WriteTypeIdBytes(VoxWriter writer) => writer.WriteTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void AssertReadTypeId(VoxReader reader) => reader.AssertReadTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void WriteFull(VoxWriter writer, ref Int64 self) { Int64Serializer.Instance.WriteTypeIdBytes(writer); WriteRaw(writer, ref self);
 }
                                                                                                                              public void WriteRaw(VoxWriter writer, ref Int64 self) { global::Dargon.Vox2.VoxGeneration_Int64.Stub_WriteRaw_Int64(writer, self);
 }
               

                                                                                                                              public Int64 ReadFull(VoxReader reader) { Int64Serializer.Instance.AssertReadTypeId(reader); return ReadRaw(reader);
 }
                                                                                                                              public Int64 ReadRaw(VoxReader reader) { return global::Dargon.Vox2.VoxGeneration_Int64.Stub_ReadRaw_Int64(reader);
 }
                                                                                                                              public void ReadFullIntoRef(VoxReader reader, ref Int64 self) => throw new InvalidOperationException("Reading into Int64 ref is not supported.");
                                                                                                                              public void ReadRawIntoRef(VoxReader reader, ref Int64 self) => throw new InvalidOperationException("Reading into Int64 ref is not supported.");
                  

                                                                                                                              void IVoxSerializer.WriteRawObject(VoxWriter writer, object val) { Int64 v = (Int64)val; WriteRaw(writer, ref v); }
                                                                                                                              object IVoxSerializer.ReadRawObject(VoxReader reader) => ReadRaw(reader);
                                                                                                                           }
               


                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class VoxGenerated_Int64Statics {
                                                                                                                              public static void WriteFullInt64(this VoxWriter writer, Int64 value) { var copy = value; Int64Serializer.Instance.WriteFull(writer, ref value); }
                                                                                                                              public static void WriteRawInt64(this VoxWriter writer, Int64 value) { var copy = value; Int64Serializer.Instance.WriteRaw(writer, ref value); }
                                                                                                                              public static Int64 ReadFullInt64(this VoxReader reader) => Int64Serializer.Instance.ReadFull(reader);
                                                                                                                              public static Int64 ReadRawInt64(this VoxReader reader) => Int64Serializer.Instance.ReadRaw(reader);
                                                                                                                           }
                                                                                                                        }

                                                                                                                        namespace Dargon.Vox2 {
               

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static partial class VoxGeneration_Int64 {
                                                                                                                              public static partial void Stub_WriteRaw_Int64(VoxWriter writer, Int64 value);
public static partial Int64 Stub_ReadRaw_Int64(VoxReader reader);
                                                               
                                                                                                                           }

                                                                                                                        }

                                                                                                                        namespace System {
                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class ByteVoxConstants {
                                                                                                                              public const int SimpleTypeId = -23;
                                                                                                                              public static ByteSerializer Serializer => ByteSerializer.Instance;
                                                                                                                              public static readonly byte[] SimpleTypeIdBytes = SimpleTypeId.ToVariableIntBytes();
                                                                                                                           }

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           [VoxType(ByteVoxConstants.SimpleTypeId, VanityRedirectFromType = typeof(Dargon.Vox2.VoxGeneration_UInt8))]
                                                                                                                           public sealed partial class ByteSerializer : IVoxSerializer<Byte> {
                                                                                                                              public static readonly ByteSerializer Instance = new();

                                                                                                                              public int SimpleTypeId => ByteVoxConstants.SimpleTypeId;
                                                                                                                              public int[] FullTypeId { get; } = new[] { ByteVoxConstants.SimpleTypeId };
                                                                                                                              public byte[] FullTypeIdBytes { get; } = ByteVoxConstants.SimpleTypeIdBytes;

                                                                                                                              public bool IsUpdatable => false;

                                                                                                                              public void WriteTypeIdBytes(VoxWriter writer) => writer.WriteTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void AssertReadTypeId(VoxReader reader) => reader.AssertReadTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void WriteFull(VoxWriter writer, ref Byte self) { ByteSerializer.Instance.WriteTypeIdBytes(writer); WriteRaw(writer, ref self);
 }
                                                                                                                              public void WriteRaw(VoxWriter writer, ref Byte self) { global::Dargon.Vox2.VoxGeneration_UInt8.Stub_WriteRaw_Byte(writer, self);
 }
               

                                                                                                                              public Byte ReadFull(VoxReader reader) { ByteSerializer.Instance.AssertReadTypeId(reader); return ReadRaw(reader);
 }
                                                                                                                              public Byte ReadRaw(VoxReader reader) { return global::Dargon.Vox2.VoxGeneration_UInt8.Stub_ReadRaw_Byte(reader);
 }
                                                                                                                              public void ReadFullIntoRef(VoxReader reader, ref Byte self) => throw new InvalidOperationException("Reading into Byte ref is not supported.");
                                                                                                                              public void ReadRawIntoRef(VoxReader reader, ref Byte self) => throw new InvalidOperationException("Reading into Byte ref is not supported.");
                  

                                                                                                                              void IVoxSerializer.WriteRawObject(VoxWriter writer, object val) { Byte v = (Byte)val; WriteRaw(writer, ref v); }
                                                                                                                              object IVoxSerializer.ReadRawObject(VoxReader reader) => ReadRaw(reader);
                                                                                                                           }
               


                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class VoxGenerated_ByteStatics {
                                                                                                                              public static void WriteFullByte(this VoxWriter writer, Byte value) { var copy = value; ByteSerializer.Instance.WriteFull(writer, ref value); }
                                                                                                                              public static void WriteRawByte(this VoxWriter writer, Byte value) { var copy = value; ByteSerializer.Instance.WriteRaw(writer, ref value); }
                                                                                                                              public static Byte ReadFullByte(this VoxReader reader) => ByteSerializer.Instance.ReadFull(reader);
                                                                                                                              public static Byte ReadRawByte(this VoxReader reader) => ByteSerializer.Instance.ReadRaw(reader);
                                                                                                                           }
                                                                                                                        }

                                                                                                                        namespace Dargon.Vox2 {
               

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static partial class VoxGeneration_UInt8 {
                                                                                                                              public static partial void Stub_WriteRaw_Byte(VoxWriter writer, Byte value);
public static partial Byte Stub_ReadRaw_Byte(VoxReader reader);
                                                               
                                                                                                                           }

                                                                                                                        }

                                                                                                                        namespace System {
                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class UInt16VoxConstants {
                                                                                                                              public const int SimpleTypeId = -24;
                                                                                                                              public static UInt16Serializer Serializer => UInt16Serializer.Instance;
                                                                                                                              public static readonly byte[] SimpleTypeIdBytes = SimpleTypeId.ToVariableIntBytes();
                                                                                                                           }

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           [VoxType(UInt16VoxConstants.SimpleTypeId, VanityRedirectFromType = typeof(Dargon.Vox2.VoxGeneration_UInt16))]
                                                                                                                           public sealed partial class UInt16Serializer : IVoxSerializer<UInt16> {
                                                                                                                              public static readonly UInt16Serializer Instance = new();

                                                                                                                              public int SimpleTypeId => UInt16VoxConstants.SimpleTypeId;
                                                                                                                              public int[] FullTypeId { get; } = new[] { UInt16VoxConstants.SimpleTypeId };
                                                                                                                              public byte[] FullTypeIdBytes { get; } = UInt16VoxConstants.SimpleTypeIdBytes;

                                                                                                                              public bool IsUpdatable => false;

                                                                                                                              public void WriteTypeIdBytes(VoxWriter writer) => writer.WriteTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void AssertReadTypeId(VoxReader reader) => reader.AssertReadTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void WriteFull(VoxWriter writer, ref UInt16 self) { UInt16Serializer.Instance.WriteTypeIdBytes(writer); WriteRaw(writer, ref self);
 }
                                                                                                                              public void WriteRaw(VoxWriter writer, ref UInt16 self) { global::Dargon.Vox2.VoxGeneration_UInt16.Stub_WriteRaw_UInt16(writer, self);
 }
               

                                                                                                                              public UInt16 ReadFull(VoxReader reader) { UInt16Serializer.Instance.AssertReadTypeId(reader); return ReadRaw(reader);
 }
                                                                                                                              public UInt16 ReadRaw(VoxReader reader) { return global::Dargon.Vox2.VoxGeneration_UInt16.Stub_ReadRaw_UInt16(reader);
 }
                                                                                                                              public void ReadFullIntoRef(VoxReader reader, ref UInt16 self) => throw new InvalidOperationException("Reading into UInt16 ref is not supported.");
                                                                                                                              public void ReadRawIntoRef(VoxReader reader, ref UInt16 self) => throw new InvalidOperationException("Reading into UInt16 ref is not supported.");
                  

                                                                                                                              void IVoxSerializer.WriteRawObject(VoxWriter writer, object val) { UInt16 v = (UInt16)val; WriteRaw(writer, ref v); }
                                                                                                                              object IVoxSerializer.ReadRawObject(VoxReader reader) => ReadRaw(reader);
                                                                                                                           }
               


                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class VoxGenerated_UInt16Statics {
                                                                                                                              public static void WriteFullUInt16(this VoxWriter writer, UInt16 value) { var copy = value; UInt16Serializer.Instance.WriteFull(writer, ref value); }
                                                                                                                              public static void WriteRawUInt16(this VoxWriter writer, UInt16 value) { var copy = value; UInt16Serializer.Instance.WriteRaw(writer, ref value); }
                                                                                                                              public static UInt16 ReadFullUInt16(this VoxReader reader) => UInt16Serializer.Instance.ReadFull(reader);
                                                                                                                              public static UInt16 ReadRawUInt16(this VoxReader reader) => UInt16Serializer.Instance.ReadRaw(reader);
                                                                                                                           }
                                                                                                                        }

                                                                                                                        namespace Dargon.Vox2 {
               

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static partial class VoxGeneration_UInt16 {
                                                                                                                              public static partial void Stub_WriteRaw_UInt16(VoxWriter writer, UInt16 value);
public static partial UInt16 Stub_ReadRaw_UInt16(VoxReader reader);
                                                               
                                                                                                                           }

                                                                                                                        }

                                                                                                                        namespace System {
                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class UInt32VoxConstants {
                                                                                                                              public const int SimpleTypeId = -25;
                                                                                                                              public static UInt32Serializer Serializer => UInt32Serializer.Instance;
                                                                                                                              public static readonly byte[] SimpleTypeIdBytes = SimpleTypeId.ToVariableIntBytes();
                                                                                                                           }

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           [VoxType(UInt32VoxConstants.SimpleTypeId, VanityRedirectFromType = typeof(Dargon.Vox2.VoxGeneration_UInt32))]
                                                                                                                           public sealed partial class UInt32Serializer : IVoxSerializer<UInt32> {
                                                                                                                              public static readonly UInt32Serializer Instance = new();

                                                                                                                              public int SimpleTypeId => UInt32VoxConstants.SimpleTypeId;
                                                                                                                              public int[] FullTypeId { get; } = new[] { UInt32VoxConstants.SimpleTypeId };
                                                                                                                              public byte[] FullTypeIdBytes { get; } = UInt32VoxConstants.SimpleTypeIdBytes;

                                                                                                                              public bool IsUpdatable => false;

                                                                                                                              public void WriteTypeIdBytes(VoxWriter writer) => writer.WriteTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void AssertReadTypeId(VoxReader reader) => reader.AssertReadTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void WriteFull(VoxWriter writer, ref UInt32 self) { UInt32Serializer.Instance.WriteTypeIdBytes(writer); WriteRaw(writer, ref self);
 }
                                                                                                                              public void WriteRaw(VoxWriter writer, ref UInt32 self) { global::Dargon.Vox2.VoxGeneration_UInt32.Stub_WriteRaw_UInt32(writer, self);
 }
               

                                                                                                                              public UInt32 ReadFull(VoxReader reader) { UInt32Serializer.Instance.AssertReadTypeId(reader); return ReadRaw(reader);
 }
                                                                                                                              public UInt32 ReadRaw(VoxReader reader) { return global::Dargon.Vox2.VoxGeneration_UInt32.Stub_ReadRaw_UInt32(reader);
 }
                                                                                                                              public void ReadFullIntoRef(VoxReader reader, ref UInt32 self) => throw new InvalidOperationException("Reading into UInt32 ref is not supported.");
                                                                                                                              public void ReadRawIntoRef(VoxReader reader, ref UInt32 self) => throw new InvalidOperationException("Reading into UInt32 ref is not supported.");
                  

                                                                                                                              void IVoxSerializer.WriteRawObject(VoxWriter writer, object val) { UInt32 v = (UInt32)val; WriteRaw(writer, ref v); }
                                                                                                                              object IVoxSerializer.ReadRawObject(VoxReader reader) => ReadRaw(reader);
                                                                                                                           }
               


                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class VoxGenerated_UInt32Statics {
                                                                                                                              public static void WriteFullUInt32(this VoxWriter writer, UInt32 value) { var copy = value; UInt32Serializer.Instance.WriteFull(writer, ref value); }
                                                                                                                              public static void WriteRawUInt32(this VoxWriter writer, UInt32 value) { var copy = value; UInt32Serializer.Instance.WriteRaw(writer, ref value); }
                                                                                                                              public static UInt32 ReadFullUInt32(this VoxReader reader) => UInt32Serializer.Instance.ReadFull(reader);
                                                                                                                              public static UInt32 ReadRawUInt32(this VoxReader reader) => UInt32Serializer.Instance.ReadRaw(reader);
                                                                                                                           }
                                                                                                                        }

                                                                                                                        namespace Dargon.Vox2 {
               

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static partial class VoxGeneration_UInt32 {
                                                                                                                              public static partial void Stub_WriteRaw_UInt32(VoxWriter writer, UInt32 value);
public static partial UInt32 Stub_ReadRaw_UInt32(VoxReader reader);
                                                               
                                                                                                                           }

                                                                                                                        }

                                                                                                                        namespace System {
                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class UInt64VoxConstants {
                                                                                                                              public const int SimpleTypeId = -26;
                                                                                                                              public static UInt64Serializer Serializer => UInt64Serializer.Instance;
                                                                                                                              public static readonly byte[] SimpleTypeIdBytes = SimpleTypeId.ToVariableIntBytes();
                                                                                                                           }

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           [VoxType(UInt64VoxConstants.SimpleTypeId, VanityRedirectFromType = typeof(Dargon.Vox2.VoxGeneration_UInt64))]
                                                                                                                           public sealed partial class UInt64Serializer : IVoxSerializer<UInt64> {
                                                                                                                              public static readonly UInt64Serializer Instance = new();

                                                                                                                              public int SimpleTypeId => UInt64VoxConstants.SimpleTypeId;
                                                                                                                              public int[] FullTypeId { get; } = new[] { UInt64VoxConstants.SimpleTypeId };
                                                                                                                              public byte[] FullTypeIdBytes { get; } = UInt64VoxConstants.SimpleTypeIdBytes;

                                                                                                                              public bool IsUpdatable => false;

                                                                                                                              public void WriteTypeIdBytes(VoxWriter writer) => writer.WriteTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void AssertReadTypeId(VoxReader reader) => reader.AssertReadTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void WriteFull(VoxWriter writer, ref UInt64 self) { UInt64Serializer.Instance.WriteTypeIdBytes(writer); WriteRaw(writer, ref self);
 }
                                                                                                                              public void WriteRaw(VoxWriter writer, ref UInt64 self) { global::Dargon.Vox2.VoxGeneration_UInt64.Stub_WriteRaw_UInt64(writer, self);
 }
               

                                                                                                                              public UInt64 ReadFull(VoxReader reader) { UInt64Serializer.Instance.AssertReadTypeId(reader); return ReadRaw(reader);
 }
                                                                                                                              public UInt64 ReadRaw(VoxReader reader) { return global::Dargon.Vox2.VoxGeneration_UInt64.Stub_ReadRaw_UInt64(reader);
 }
                                                                                                                              public void ReadFullIntoRef(VoxReader reader, ref UInt64 self) => throw new InvalidOperationException("Reading into UInt64 ref is not supported.");
                                                                                                                              public void ReadRawIntoRef(VoxReader reader, ref UInt64 self) => throw new InvalidOperationException("Reading into UInt64 ref is not supported.");
                  

                                                                                                                              void IVoxSerializer.WriteRawObject(VoxWriter writer, object val) { UInt64 v = (UInt64)val; WriteRaw(writer, ref v); }
                                                                                                                              object IVoxSerializer.ReadRawObject(VoxReader reader) => ReadRaw(reader);
                                                                                                                           }
               


                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class VoxGenerated_UInt64Statics {
                                                                                                                              public static void WriteFullUInt64(this VoxWriter writer, UInt64 value) { var copy = value; UInt64Serializer.Instance.WriteFull(writer, ref value); }
                                                                                                                              public static void WriteRawUInt64(this VoxWriter writer, UInt64 value) { var copy = value; UInt64Serializer.Instance.WriteRaw(writer, ref value); }
                                                                                                                              public static UInt64 ReadFullUInt64(this VoxReader reader) => UInt64Serializer.Instance.ReadFull(reader);
                                                                                                                              public static UInt64 ReadRawUInt64(this VoxReader reader) => UInt64Serializer.Instance.ReadRaw(reader);
                                                                                                                           }
                                                                                                                        }

                                                                                                                        namespace Dargon.Vox2 {
               

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static partial class VoxGeneration_UInt64 {
                                                                                                                              public static partial void Stub_WriteRaw_UInt64(VoxWriter writer, UInt64 value);
public static partial UInt64 Stub_ReadRaw_UInt64(VoxReader reader);
                                                               
                                                                                                                           }

                                                                                                                        }

                                                                                                                        namespace System {
                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class SingleVoxConstants {
                                                                                                                              public const int SimpleTypeId = -27;
                                                                                                                              public static SingleSerializer Serializer => SingleSerializer.Instance;
                                                                                                                              public static readonly byte[] SimpleTypeIdBytes = SimpleTypeId.ToVariableIntBytes();
                                                                                                                           }

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           [VoxType(SingleVoxConstants.SimpleTypeId, VanityRedirectFromType = typeof(Dargon.Vox2.VoxGeneration_Float))]
                                                                                                                           public sealed partial class SingleSerializer : IVoxSerializer<Single> {
                                                                                                                              public static readonly SingleSerializer Instance = new();

                                                                                                                              public int SimpleTypeId => SingleVoxConstants.SimpleTypeId;
                                                                                                                              public int[] FullTypeId { get; } = new[] { SingleVoxConstants.SimpleTypeId };
                                                                                                                              public byte[] FullTypeIdBytes { get; } = SingleVoxConstants.SimpleTypeIdBytes;

                                                                                                                              public bool IsUpdatable => false;

                                                                                                                              public void WriteTypeIdBytes(VoxWriter writer) => writer.WriteTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void AssertReadTypeId(VoxReader reader) => reader.AssertReadTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void WriteFull(VoxWriter writer, ref Single self) { SingleSerializer.Instance.WriteTypeIdBytes(writer); WriteRaw(writer, ref self);
 }
                                                                                                                              public void WriteRaw(VoxWriter writer, ref Single self) { global::Dargon.Vox2.VoxGeneration_Float.Stub_WriteRaw_Single(writer, self);
 }
               

                                                                                                                              public Single ReadFull(VoxReader reader) { SingleSerializer.Instance.AssertReadTypeId(reader); return ReadRaw(reader);
 }
                                                                                                                              public Single ReadRaw(VoxReader reader) { return global::Dargon.Vox2.VoxGeneration_Float.Stub_ReadRaw_Single(reader);
 }
                                                                                                                              public void ReadFullIntoRef(VoxReader reader, ref Single self) => throw new InvalidOperationException("Reading into Single ref is not supported.");
                                                                                                                              public void ReadRawIntoRef(VoxReader reader, ref Single self) => throw new InvalidOperationException("Reading into Single ref is not supported.");
                  

                                                                                                                              void IVoxSerializer.WriteRawObject(VoxWriter writer, object val) { Single v = (Single)val; WriteRaw(writer, ref v); }
                                                                                                                              object IVoxSerializer.ReadRawObject(VoxReader reader) => ReadRaw(reader);
                                                                                                                           }
               


                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class VoxGenerated_SingleStatics {
                                                                                                                              public static void WriteFullSingle(this VoxWriter writer, Single value) { var copy = value; SingleSerializer.Instance.WriteFull(writer, ref value); }
                                                                                                                              public static void WriteRawSingle(this VoxWriter writer, Single value) { var copy = value; SingleSerializer.Instance.WriteRaw(writer, ref value); }
                                                                                                                              public static Single ReadFullSingle(this VoxReader reader) => SingleSerializer.Instance.ReadFull(reader);
                                                                                                                              public static Single ReadRawSingle(this VoxReader reader) => SingleSerializer.Instance.ReadRaw(reader);
                                                                                                                           }
                                                                                                                        }

                                                                                                                        namespace Dargon.Vox2 {
               

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static partial class VoxGeneration_Float {
                                                                                                                              public static partial void Stub_WriteRaw_Single(VoxWriter writer, Single value);
public static partial Single Stub_ReadRaw_Single(VoxReader reader);
                                                               
                                                                                                                           }

                                                                                                                        }

                                                                                                                        namespace System {
                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class DoubleVoxConstants {
                                                                                                                              public const int SimpleTypeId = -28;
                                                                                                                              public static DoubleSerializer Serializer => DoubleSerializer.Instance;
                                                                                                                              public static readonly byte[] SimpleTypeIdBytes = SimpleTypeId.ToVariableIntBytes();
                                                                                                                           }

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           [VoxType(DoubleVoxConstants.SimpleTypeId, VanityRedirectFromType = typeof(Dargon.Vox2.VoxGeneration_Double))]
                                                                                                                           public sealed partial class DoubleSerializer : IVoxSerializer<Double> {
                                                                                                                              public static readonly DoubleSerializer Instance = new();

                                                                                                                              public int SimpleTypeId => DoubleVoxConstants.SimpleTypeId;
                                                                                                                              public int[] FullTypeId { get; } = new[] { DoubleVoxConstants.SimpleTypeId };
                                                                                                                              public byte[] FullTypeIdBytes { get; } = DoubleVoxConstants.SimpleTypeIdBytes;

                                                                                                                              public bool IsUpdatable => false;

                                                                                                                              public void WriteTypeIdBytes(VoxWriter writer) => writer.WriteTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void AssertReadTypeId(VoxReader reader) => reader.AssertReadTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void WriteFull(VoxWriter writer, ref Double self) { DoubleSerializer.Instance.WriteTypeIdBytes(writer); WriteRaw(writer, ref self);
 }
                                                                                                                              public void WriteRaw(VoxWriter writer, ref Double self) { global::Dargon.Vox2.VoxGeneration_Double.Stub_WriteRaw_Double(writer, self);
 }
               

                                                                                                                              public Double ReadFull(VoxReader reader) { DoubleSerializer.Instance.AssertReadTypeId(reader); return ReadRaw(reader);
 }
                                                                                                                              public Double ReadRaw(VoxReader reader) { return global::Dargon.Vox2.VoxGeneration_Double.Stub_ReadRaw_Double(reader);
 }
                                                                                                                              public void ReadFullIntoRef(VoxReader reader, ref Double self) => throw new InvalidOperationException("Reading into Double ref is not supported.");
                                                                                                                              public void ReadRawIntoRef(VoxReader reader, ref Double self) => throw new InvalidOperationException("Reading into Double ref is not supported.");
                  

                                                                                                                              void IVoxSerializer.WriteRawObject(VoxWriter writer, object val) { Double v = (Double)val; WriteRaw(writer, ref v); }
                                                                                                                              object IVoxSerializer.ReadRawObject(VoxReader reader) => ReadRaw(reader);
                                                                                                                           }
               


                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class VoxGenerated_DoubleStatics {
                                                                                                                              public static void WriteFullDouble(this VoxWriter writer, Double value) { var copy = value; DoubleSerializer.Instance.WriteFull(writer, ref value); }
                                                                                                                              public static void WriteRawDouble(this VoxWriter writer, Double value) { var copy = value; DoubleSerializer.Instance.WriteRaw(writer, ref value); }
                                                                                                                              public static Double ReadFullDouble(this VoxReader reader) => DoubleSerializer.Instance.ReadFull(reader);
                                                                                                                              public static Double ReadRawDouble(this VoxReader reader) => DoubleSerializer.Instance.ReadRaw(reader);
                                                                                                                           }
                                                                                                                        }

                                                                                                                        namespace Dargon.Vox2 {
               

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static partial class VoxGeneration_Double {
                                                                                                                              public static partial void Stub_WriteRaw_Double(VoxWriter writer, Double value);
public static partial Double Stub_ReadRaw_Double(VoxReader reader);
                                                               
                                                                                                                           }

                                                                                                                        }

                                                                                                                        namespace System {
                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class StringVoxConstants {
                                                                                                                              public const int SimpleTypeId = -4;
                                                                                                                              public static StringSerializer Serializer => StringSerializer.Instance;
                                                                                                                              public static readonly byte[] SimpleTypeIdBytes = SimpleTypeId.ToVariableIntBytes();
                                                                                                                           }

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           [VoxType(StringVoxConstants.SimpleTypeId, VanityRedirectFromType = typeof(Dargon.Vox2.VoxGeneration_String))]
                                                                                                                           public sealed partial class StringSerializer : IVoxSerializer<String> {
                                                                                                                              public static readonly StringSerializer Instance = new();

                                                                                                                              public int SimpleTypeId => StringVoxConstants.SimpleTypeId;
                                                                                                                              public int[] FullTypeId { get; } = new[] { StringVoxConstants.SimpleTypeId };
                                                                                                                              public byte[] FullTypeIdBytes { get; } = StringVoxConstants.SimpleTypeIdBytes;

                                                                                                                              public bool IsUpdatable => false;

                                                                                                                              public void WriteTypeIdBytes(VoxWriter writer) => writer.WriteTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void AssertReadTypeId(VoxReader reader) => reader.AssertReadTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void WriteFull(VoxWriter writer, ref String self) { StringSerializer.Instance.WriteTypeIdBytes(writer); WriteRaw(writer, ref self);
 }
                                                                                                                              public void WriteRaw(VoxWriter writer, ref String self) { global::Dargon.Vox2.VoxGeneration_String.Stub_WriteRaw_String(writer, self);
 }
               

                                                                                                                              public String ReadFull(VoxReader reader) { StringSerializer.Instance.AssertReadTypeId(reader); return ReadRaw(reader);
 }
                                                                                                                              public String ReadRaw(VoxReader reader) { return global::Dargon.Vox2.VoxGeneration_String.Stub_ReadRaw_String(reader);
 }
                                                                                                                              public void ReadFullIntoRef(VoxReader reader, ref String self) => throw new InvalidOperationException("Reading into String ref is not supported.");
                                                                                                                              public void ReadRawIntoRef(VoxReader reader, ref String self) => throw new InvalidOperationException("Reading into String ref is not supported.");
                  

                                                                                                                              void IVoxSerializer.WriteRawObject(VoxWriter writer, object val) { String v = (String)val; WriteRaw(writer, ref v); }
                                                                                                                              object IVoxSerializer.ReadRawObject(VoxReader reader) => ReadRaw(reader);
                                                                                                                           }
               


                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class VoxGenerated_StringStatics {
                                                                                                                              public static void WriteFullString(this VoxWriter writer, String value) { var copy = value; StringSerializer.Instance.WriteFull(writer, ref value); }
                                                                                                                              public static void WriteRawString(this VoxWriter writer, String value) { var copy = value; StringSerializer.Instance.WriteRaw(writer, ref value); }
                                                                                                                              public static String ReadFullString(this VoxReader reader) => StringSerializer.Instance.ReadFull(reader);
                                                                                                                              public static String ReadRawString(this VoxReader reader) => StringSerializer.Instance.ReadRaw(reader);
                                                                                                                           }
                                                                                                                        }

                                                                                                                        namespace Dargon.Vox2 {
               

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static partial class VoxGeneration_String {
                                                                                                                              public static partial void Stub_WriteRaw_String(VoxWriter writer, String value);
public static partial String Stub_ReadRaw_String(VoxReader reader);
                                                               
                                                                                                                           }

                                                                                                                        }

                                                                                                                        namespace System {
                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class GuidVoxConstants {
                                                                                                                              public const int SimpleTypeId = -29;
                                                                                                                              public static GuidSerializer Serializer => GuidSerializer.Instance;
                                                                                                                              public static readonly byte[] SimpleTypeIdBytes = SimpleTypeId.ToVariableIntBytes();
                                                                                                                           }

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           [VoxType(GuidVoxConstants.SimpleTypeId, VanityRedirectFromType = typeof(Dargon.Vox2.VoxGeneration_Guid))]
                                                                                                                           public sealed partial class GuidSerializer : IVoxSerializer<Guid> {
                                                                                                                              public static readonly GuidSerializer Instance = new();

                                                                                                                              public int SimpleTypeId => GuidVoxConstants.SimpleTypeId;
                                                                                                                              public int[] FullTypeId { get; } = new[] { GuidVoxConstants.SimpleTypeId };
                                                                                                                              public byte[] FullTypeIdBytes { get; } = GuidVoxConstants.SimpleTypeIdBytes;

                                                                                                                              public bool IsUpdatable => false;

                                                                                                                              public void WriteTypeIdBytes(VoxWriter writer) => writer.WriteTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void AssertReadTypeId(VoxReader reader) => reader.AssertReadTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void WriteFull(VoxWriter writer, ref Guid self) { GuidSerializer.Instance.WriteTypeIdBytes(writer); WriteRaw(writer, ref self);
 }
                                                                                                                              public void WriteRaw(VoxWriter writer, ref Guid self) { global::Dargon.Vox2.VoxGeneration_Guid.Stub_WriteRaw_Guid(writer, self);
 }
               

                                                                                                                              public Guid ReadFull(VoxReader reader) { GuidSerializer.Instance.AssertReadTypeId(reader); return ReadRaw(reader);
 }
                                                                                                                              public Guid ReadRaw(VoxReader reader) { return global::Dargon.Vox2.VoxGeneration_Guid.Stub_ReadRaw_Guid(reader);
 }
                                                                                                                              public void ReadFullIntoRef(VoxReader reader, ref Guid self) => throw new InvalidOperationException("Reading into Guid ref is not supported.");
                                                                                                                              public void ReadRawIntoRef(VoxReader reader, ref Guid self) => throw new InvalidOperationException("Reading into Guid ref is not supported.");
                  

                                                                                                                              void IVoxSerializer.WriteRawObject(VoxWriter writer, object val) { Guid v = (Guid)val; WriteRaw(writer, ref v); }
                                                                                                                              object IVoxSerializer.ReadRawObject(VoxReader reader) => ReadRaw(reader);
                                                                                                                           }
               


                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class VoxGenerated_GuidStatics {
                                                                                                                              public static void WriteFullGuid(this VoxWriter writer, Guid value) { var copy = value; GuidSerializer.Instance.WriteFull(writer, ref value); }
                                                                                                                              public static void WriteRawGuid(this VoxWriter writer, Guid value) { var copy = value; GuidSerializer.Instance.WriteRaw(writer, ref value); }
                                                                                                                              public static Guid ReadFullGuid(this VoxReader reader) => GuidSerializer.Instance.ReadFull(reader);
                                                                                                                              public static Guid ReadRawGuid(this VoxReader reader) => GuidSerializer.Instance.ReadRaw(reader);
                                                                                                                           }
                                                                                                                        }

                                                                                                                        namespace Dargon.Vox2 {
               

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static partial class VoxGeneration_Guid {
                                                                                                                              public static partial void Stub_WriteRaw_Guid(VoxWriter writer, Guid value);
public static partial Guid Stub_ReadRaw_Guid(VoxReader reader);
                                                               
                                                                                                                           }

                                                                                                                        }

                                                                                                                        namespace System.Numerics {
                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class Vector2VoxConstants {
                                                                                                                              public const int SimpleTypeId = -32;
                                                                                                                              public static Vector2Serializer Serializer => Vector2Serializer.Instance;
                                                                                                                              public static readonly byte[] SimpleTypeIdBytes = SimpleTypeId.ToVariableIntBytes();
                                                                                                                           }

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           [VoxType(Vector2VoxConstants.SimpleTypeId, VanityRedirectFromType = typeof(Dargon.Vox2.VoxGeneration_Vector2))]
                                                                                                                           public sealed partial class Vector2Serializer : IVoxSerializer<Vector2> {
                                                                                                                              public static readonly Vector2Serializer Instance = new();

                                                                                                                              public int SimpleTypeId => Vector2VoxConstants.SimpleTypeId;
                                                                                                                              public int[] FullTypeId { get; } = new[] { Vector2VoxConstants.SimpleTypeId };
                                                                                                                              public byte[] FullTypeIdBytes { get; } = Vector2VoxConstants.SimpleTypeIdBytes;

                                                                                                                              public bool IsUpdatable => true;

                                                                                                                              public void WriteTypeIdBytes(VoxWriter writer) => writer.WriteTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void AssertReadTypeId(VoxReader reader) => reader.AssertReadTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void WriteFull(VoxWriter writer, ref Vector2 self) { Vector2Serializer.Instance.WriteTypeIdBytes(writer); WriteRaw(writer, ref self);
 }
                                                                                                                              public void WriteRaw(VoxWriter writer, ref Vector2 self) { 
                                                                                                                                  {
writer.WriteRawSingle(self.X);

                                                                                                                                  }

                                                                                                                                  {
writer.WriteRawSingle(self.Y);

                                                                                                                                  }
 }
               

                                                                                                                              public Vector2 ReadFull(VoxReader reader) { Vector2 res = new(); ReadFullIntoRef(reader, ref res); return res; }
                                                                                                                              public Vector2 ReadRaw(VoxReader reader) { Vector2 res = new(); ReadRawIntoRef(reader, ref res); return res; }
                                                                                                                              public void ReadFullIntoRef(VoxReader reader, ref Vector2 self) { Vector2Serializer.Instance.AssertReadTypeId(reader); ReadRawIntoRef(reader, ref self);
 }
                                                                                                                              public void ReadRawIntoRef(VoxReader reader, ref Vector2 self) { 
                                                                                                                                  {

                                                                                                                                     self.X = reader.ReadRawSingle();
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.Y = reader.ReadRawSingle();
                                                                                                                                  }
 }
                  

                                                                                                                              void IVoxSerializer.WriteRawObject(VoxWriter writer, object val) { Vector2 v = (Vector2)val; WriteRaw(writer, ref v); }
                                                                                                                              object IVoxSerializer.ReadRawObject(VoxReader reader) => ReadRaw(reader);
                                                                                                                           }
               


                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class VoxGenerated_Vector2Statics {
                                                                                                                              public static void WriteFullVector2(this VoxWriter writer, Vector2 value) { var copy = value; Vector2Serializer.Instance.WriteFull(writer, ref value); }
                                                                                                                              public static void WriteRawVector2(this VoxWriter writer, Vector2 value) { var copy = value; Vector2Serializer.Instance.WriteRaw(writer, ref value); }
                                                                                                                              public static Vector2 ReadFullVector2(this VoxReader reader) => Vector2Serializer.Instance.ReadFull(reader);
                                                                                                                              public static Vector2 ReadRawVector2(this VoxReader reader) => Vector2Serializer.Instance.ReadRaw(reader);
                                                                                                                           }
                                                                                                                        }

                                                                                                                        namespace Dargon.Vox2 {
               

                                                                                                                        }

                                                                                                                        namespace System.Numerics {
                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class Vector3VoxConstants {
                                                                                                                              public const int SimpleTypeId = -33;
                                                                                                                              public static Vector3Serializer Serializer => Vector3Serializer.Instance;
                                                                                                                              public static readonly byte[] SimpleTypeIdBytes = SimpleTypeId.ToVariableIntBytes();
                                                                                                                           }

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           [VoxType(Vector3VoxConstants.SimpleTypeId, VanityRedirectFromType = typeof(Dargon.Vox2.VoxGeneration_Vector3))]
                                                                                                                           public sealed partial class Vector3Serializer : IVoxSerializer<Vector3> {
                                                                                                                              public static readonly Vector3Serializer Instance = new();

                                                                                                                              public int SimpleTypeId => Vector3VoxConstants.SimpleTypeId;
                                                                                                                              public int[] FullTypeId { get; } = new[] { Vector3VoxConstants.SimpleTypeId };
                                                                                                                              public byte[] FullTypeIdBytes { get; } = Vector3VoxConstants.SimpleTypeIdBytes;

                                                                                                                              public bool IsUpdatable => true;

                                                                                                                              public void WriteTypeIdBytes(VoxWriter writer) => writer.WriteTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void AssertReadTypeId(VoxReader reader) => reader.AssertReadTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void WriteFull(VoxWriter writer, ref Vector3 self) { Vector3Serializer.Instance.WriteTypeIdBytes(writer); WriteRaw(writer, ref self);
 }
                                                                                                                              public void WriteRaw(VoxWriter writer, ref Vector3 self) { 
                                                                                                                                  {
writer.WriteRawSingle(self.X);

                                                                                                                                  }

                                                                                                                                  {
writer.WriteRawSingle(self.Y);

                                                                                                                                  }

                                                                                                                                  {
writer.WriteRawSingle(self.Z);

                                                                                                                                  }
 }
               

                                                                                                                              public Vector3 ReadFull(VoxReader reader) { Vector3 res = new(); ReadFullIntoRef(reader, ref res); return res; }
                                                                                                                              public Vector3 ReadRaw(VoxReader reader) { Vector3 res = new(); ReadRawIntoRef(reader, ref res); return res; }
                                                                                                                              public void ReadFullIntoRef(VoxReader reader, ref Vector3 self) { Vector3Serializer.Instance.AssertReadTypeId(reader); ReadRawIntoRef(reader, ref self);
 }
                                                                                                                              public void ReadRawIntoRef(VoxReader reader, ref Vector3 self) { 
                                                                                                                                  {

                                                                                                                                     self.X = reader.ReadRawSingle();
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.Y = reader.ReadRawSingle();
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.Z = reader.ReadRawSingle();
                                                                                                                                  }
 }
                  

                                                                                                                              void IVoxSerializer.WriteRawObject(VoxWriter writer, object val) { Vector3 v = (Vector3)val; WriteRaw(writer, ref v); }
                                                                                                                              object IVoxSerializer.ReadRawObject(VoxReader reader) => ReadRaw(reader);
                                                                                                                           }
               


                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class VoxGenerated_Vector3Statics {
                                                                                                                              public static void WriteFullVector3(this VoxWriter writer, Vector3 value) { var copy = value; Vector3Serializer.Instance.WriteFull(writer, ref value); }
                                                                                                                              public static void WriteRawVector3(this VoxWriter writer, Vector3 value) { var copy = value; Vector3Serializer.Instance.WriteRaw(writer, ref value); }
                                                                                                                              public static Vector3 ReadFullVector3(this VoxReader reader) => Vector3Serializer.Instance.ReadFull(reader);
                                                                                                                              public static Vector3 ReadRawVector3(this VoxReader reader) => Vector3Serializer.Instance.ReadRaw(reader);
                                                                                                                           }
                                                                                                                        }

                                                                                                                        namespace Dargon.Vox2 {
               

                                                                                                                        }

                                                                                                                        namespace System.Numerics {
                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class Vector4VoxConstants {
                                                                                                                              public const int SimpleTypeId = -34;
                                                                                                                              public static Vector4Serializer Serializer => Vector4Serializer.Instance;
                                                                                                                              public static readonly byte[] SimpleTypeIdBytes = SimpleTypeId.ToVariableIntBytes();
                                                                                                                           }

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           [VoxType(Vector4VoxConstants.SimpleTypeId, VanityRedirectFromType = typeof(Dargon.Vox2.VoxGeneration_Vector4))]
                                                                                                                           public sealed partial class Vector4Serializer : IVoxSerializer<Vector4> {
                                                                                                                              public static readonly Vector4Serializer Instance = new();

                                                                                                                              public int SimpleTypeId => Vector4VoxConstants.SimpleTypeId;
                                                                                                                              public int[] FullTypeId { get; } = new[] { Vector4VoxConstants.SimpleTypeId };
                                                                                                                              public byte[] FullTypeIdBytes { get; } = Vector4VoxConstants.SimpleTypeIdBytes;

                                                                                                                              public bool IsUpdatable => true;

                                                                                                                              public void WriteTypeIdBytes(VoxWriter writer) => writer.WriteTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void AssertReadTypeId(VoxReader reader) => reader.AssertReadTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void WriteFull(VoxWriter writer, ref Vector4 self) { Vector4Serializer.Instance.WriteTypeIdBytes(writer); WriteRaw(writer, ref self);
 }
                                                                                                                              public void WriteRaw(VoxWriter writer, ref Vector4 self) { 
                                                                                                                                  {
writer.WriteRawSingle(self.X);

                                                                                                                                  }

                                                                                                                                  {
writer.WriteRawSingle(self.Y);

                                                                                                                                  }

                                                                                                                                  {
writer.WriteRawSingle(self.Z);

                                                                                                                                  }

                                                                                                                                  {
writer.WriteRawSingle(self.W);

                                                                                                                                  }
 }
               

                                                                                                                              public Vector4 ReadFull(VoxReader reader) { Vector4 res = new(); ReadFullIntoRef(reader, ref res); return res; }
                                                                                                                              public Vector4 ReadRaw(VoxReader reader) { Vector4 res = new(); ReadRawIntoRef(reader, ref res); return res; }
                                                                                                                              public void ReadFullIntoRef(VoxReader reader, ref Vector4 self) { Vector4Serializer.Instance.AssertReadTypeId(reader); ReadRawIntoRef(reader, ref self);
 }
                                                                                                                              public void ReadRawIntoRef(VoxReader reader, ref Vector4 self) { 
                                                                                                                                  {

                                                                                                                                     self.X = reader.ReadRawSingle();
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.Y = reader.ReadRawSingle();
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.Z = reader.ReadRawSingle();
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.W = reader.ReadRawSingle();
                                                                                                                                  }
 }
                  

                                                                                                                              void IVoxSerializer.WriteRawObject(VoxWriter writer, object val) { Vector4 v = (Vector4)val; WriteRaw(writer, ref v); }
                                                                                                                              object IVoxSerializer.ReadRawObject(VoxReader reader) => ReadRaw(reader);
                                                                                                                           }
               


                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class VoxGenerated_Vector4Statics {
                                                                                                                              public static void WriteFullVector4(this VoxWriter writer, Vector4 value) { var copy = value; Vector4Serializer.Instance.WriteFull(writer, ref value); }
                                                                                                                              public static void WriteRawVector4(this VoxWriter writer, Vector4 value) { var copy = value; Vector4Serializer.Instance.WriteRaw(writer, ref value); }
                                                                                                                              public static Vector4 ReadFullVector4(this VoxReader reader) => Vector4Serializer.Instance.ReadFull(reader);
                                                                                                                              public static Vector4 ReadRawVector4(this VoxReader reader) => Vector4Serializer.Instance.ReadRaw(reader);
                                                                                                                           }
                                                                                                                        }

                                                                                                                        namespace Dargon.Vox2 {
               

                                                                                                                        }

                                                                                                                        namespace System {
                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class DateTimeVoxConstants {
                                                                                                                              public const int SimpleTypeId = -42;
                                                                                                                              public static DateTimeSerializer Serializer => DateTimeSerializer.Instance;
                                                                                                                              public static readonly byte[] SimpleTypeIdBytes = SimpleTypeId.ToVariableIntBytes();
                                                                                                                           }

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           [VoxType(DateTimeVoxConstants.SimpleTypeId, VanityRedirectFromType = typeof(Dargon.Vox2.VoxGeneration_DateTime))]
                                                                                                                           public sealed partial class DateTimeSerializer : IVoxSerializer<DateTime> {
                                                                                                                              public static readonly DateTimeSerializer Instance = new();

                                                                                                                              public int SimpleTypeId => DateTimeVoxConstants.SimpleTypeId;
                                                                                                                              public int[] FullTypeId { get; } = new[] { DateTimeVoxConstants.SimpleTypeId };
                                                                                                                              public byte[] FullTypeIdBytes { get; } = DateTimeVoxConstants.SimpleTypeIdBytes;

                                                                                                                              public bool IsUpdatable => false;

                                                                                                                              public void WriteTypeIdBytes(VoxWriter writer) => writer.WriteTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void AssertReadTypeId(VoxReader reader) => reader.AssertReadTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void WriteFull(VoxWriter writer, ref DateTime self) { DateTimeSerializer.Instance.WriteTypeIdBytes(writer); WriteRaw(writer, ref self);
 }
                                                                                                                              public void WriteRaw(VoxWriter writer, ref DateTime self) { global::Dargon.Vox2.VoxGeneration_DateTime.Stub_WriteRaw_DateTime(writer, self);
 }
               

                                                                                                                              public DateTime ReadFull(VoxReader reader) { DateTimeSerializer.Instance.AssertReadTypeId(reader); return ReadRaw(reader);
 }
                                                                                                                              public DateTime ReadRaw(VoxReader reader) { return global::Dargon.Vox2.VoxGeneration_DateTime.Stub_ReadRaw_DateTime(reader);
 }
                                                                                                                              public void ReadFullIntoRef(VoxReader reader, ref DateTime self) => throw new InvalidOperationException("Reading into DateTime ref is not supported.");
                                                                                                                              public void ReadRawIntoRef(VoxReader reader, ref DateTime self) => throw new InvalidOperationException("Reading into DateTime ref is not supported.");
                  

                                                                                                                              void IVoxSerializer.WriteRawObject(VoxWriter writer, object val) { DateTime v = (DateTime)val; WriteRaw(writer, ref v); }
                                                                                                                              object IVoxSerializer.ReadRawObject(VoxReader reader) => ReadRaw(reader);
                                                                                                                           }
               


                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class VoxGenerated_DateTimeStatics {
                                                                                                                              public static void WriteFullDateTime(this VoxWriter writer, DateTime value) { var copy = value; DateTimeSerializer.Instance.WriteFull(writer, ref value); }
                                                                                                                              public static void WriteRawDateTime(this VoxWriter writer, DateTime value) { var copy = value; DateTimeSerializer.Instance.WriteRaw(writer, ref value); }
                                                                                                                              public static DateTime ReadFullDateTime(this VoxReader reader) => DateTimeSerializer.Instance.ReadFull(reader);
                                                                                                                              public static DateTime ReadRawDateTime(this VoxReader reader) => DateTimeSerializer.Instance.ReadRaw(reader);
                                                                                                                           }
                                                                                                                        }

                                                                                                                        namespace Dargon.Vox2 {
               

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static partial class VoxGeneration_DateTime {
                                                                                                                              public static partial void Stub_WriteRaw_DateTime(VoxWriter writer, DateTime value);
public static partial DateTime Stub_ReadRaw_DateTime(VoxReader reader);
                                                               
                                                                                                                           }

                                                                                                                        }

                                                                                                                        namespace System {
                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class DateTimeOffsetVoxConstants {
                                                                                                                              public const int SimpleTypeId = -43;
                                                                                                                              public static DateTimeOffsetSerializer Serializer => DateTimeOffsetSerializer.Instance;
                                                                                                                              public static readonly byte[] SimpleTypeIdBytes = SimpleTypeId.ToVariableIntBytes();
                                                                                                                           }

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           [VoxType(DateTimeOffsetVoxConstants.SimpleTypeId, VanityRedirectFromType = typeof(Dargon.Vox2.VoxGeneration_DateTimeOffset))]
                                                                                                                           public sealed partial class DateTimeOffsetSerializer : IVoxSerializer<DateTimeOffset> {
                                                                                                                              public static readonly DateTimeOffsetSerializer Instance = new();

                                                                                                                              public int SimpleTypeId => DateTimeOffsetVoxConstants.SimpleTypeId;
                                                                                                                              public int[] FullTypeId { get; } = new[] { DateTimeOffsetVoxConstants.SimpleTypeId };
                                                                                                                              public byte[] FullTypeIdBytes { get; } = DateTimeOffsetVoxConstants.SimpleTypeIdBytes;

                                                                                                                              public bool IsUpdatable => false;

                                                                                                                              public void WriteTypeIdBytes(VoxWriter writer) => writer.WriteTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void AssertReadTypeId(VoxReader reader) => reader.AssertReadTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void WriteFull(VoxWriter writer, ref DateTimeOffset self) { DateTimeOffsetSerializer.Instance.WriteTypeIdBytes(writer); WriteRaw(writer, ref self);
 }
                                                                                                                              public void WriteRaw(VoxWriter writer, ref DateTimeOffset self) { global::Dargon.Vox2.VoxGeneration_DateTimeOffset.Stub_WriteRaw_DateTimeOffset(writer, self);
 }
               

                                                                                                                              public DateTimeOffset ReadFull(VoxReader reader) { DateTimeOffsetSerializer.Instance.AssertReadTypeId(reader); return ReadRaw(reader);
 }
                                                                                                                              public DateTimeOffset ReadRaw(VoxReader reader) { return global::Dargon.Vox2.VoxGeneration_DateTimeOffset.Stub_ReadRaw_DateTimeOffset(reader);
 }
                                                                                                                              public void ReadFullIntoRef(VoxReader reader, ref DateTimeOffset self) => throw new InvalidOperationException("Reading into DateTimeOffset ref is not supported.");
                                                                                                                              public void ReadRawIntoRef(VoxReader reader, ref DateTimeOffset self) => throw new InvalidOperationException("Reading into DateTimeOffset ref is not supported.");
                  

                                                                                                                              void IVoxSerializer.WriteRawObject(VoxWriter writer, object val) { DateTimeOffset v = (DateTimeOffset)val; WriteRaw(writer, ref v); }
                                                                                                                              object IVoxSerializer.ReadRawObject(VoxReader reader) => ReadRaw(reader);
                                                                                                                           }
               


                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class VoxGenerated_DateTimeOffsetStatics {
                                                                                                                              public static void WriteFullDateTimeOffset(this VoxWriter writer, DateTimeOffset value) { var copy = value; DateTimeOffsetSerializer.Instance.WriteFull(writer, ref value); }
                                                                                                                              public static void WriteRawDateTimeOffset(this VoxWriter writer, DateTimeOffset value) { var copy = value; DateTimeOffsetSerializer.Instance.WriteRaw(writer, ref value); }
                                                                                                                              public static DateTimeOffset ReadFullDateTimeOffset(this VoxReader reader) => DateTimeOffsetSerializer.Instance.ReadFull(reader);
                                                                                                                              public static DateTimeOffset ReadRawDateTimeOffset(this VoxReader reader) => DateTimeOffsetSerializer.Instance.ReadRaw(reader);
                                                                                                                           }
                                                                                                                        }

                                                                                                                        namespace Dargon.Vox2 {
               

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static partial class VoxGeneration_DateTimeOffset {
                                                                                                                              public static partial void Stub_WriteRaw_DateTimeOffset(VoxWriter writer, DateTimeOffset value);
public static partial DateTimeOffset Stub_ReadRaw_DateTimeOffset(VoxReader reader);
                                                               
                                                                                                                           }

                                                                                                                        }

                                                                                                                        namespace System {
                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class TimeSpanVoxConstants {
                                                                                                                              public const int SimpleTypeId = -44;
                                                                                                                              public static TimeSpanSerializer Serializer => TimeSpanSerializer.Instance;
                                                                                                                              public static readonly byte[] SimpleTypeIdBytes = SimpleTypeId.ToVariableIntBytes();
                                                                                                                           }

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           [VoxType(TimeSpanVoxConstants.SimpleTypeId, VanityRedirectFromType = typeof(Dargon.Vox2.VoxGeneration_TimeSpan))]
                                                                                                                           public sealed partial class TimeSpanSerializer : IVoxSerializer<TimeSpan> {
                                                                                                                              public static readonly TimeSpanSerializer Instance = new();

                                                                                                                              public int SimpleTypeId => TimeSpanVoxConstants.SimpleTypeId;
                                                                                                                              public int[] FullTypeId { get; } = new[] { TimeSpanVoxConstants.SimpleTypeId };
                                                                                                                              public byte[] FullTypeIdBytes { get; } = TimeSpanVoxConstants.SimpleTypeIdBytes;

                                                                                                                              public bool IsUpdatable => false;

                                                                                                                              public void WriteTypeIdBytes(VoxWriter writer) => writer.WriteTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void AssertReadTypeId(VoxReader reader) => reader.AssertReadTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void WriteFull(VoxWriter writer, ref TimeSpan self) { TimeSpanSerializer.Instance.WriteTypeIdBytes(writer); WriteRaw(writer, ref self);
 }
                                                                                                                              public void WriteRaw(VoxWriter writer, ref TimeSpan self) { global::Dargon.Vox2.VoxGeneration_TimeSpan.Stub_WriteRaw_TimeSpan(writer, self);
 }
               

                                                                                                                              public TimeSpan ReadFull(VoxReader reader) { TimeSpanSerializer.Instance.AssertReadTypeId(reader); return ReadRaw(reader);
 }
                                                                                                                              public TimeSpan ReadRaw(VoxReader reader) { return global::Dargon.Vox2.VoxGeneration_TimeSpan.Stub_ReadRaw_TimeSpan(reader);
 }
                                                                                                                              public void ReadFullIntoRef(VoxReader reader, ref TimeSpan self) => throw new InvalidOperationException("Reading into TimeSpan ref is not supported.");
                                                                                                                              public void ReadRawIntoRef(VoxReader reader, ref TimeSpan self) => throw new InvalidOperationException("Reading into TimeSpan ref is not supported.");
                  

                                                                                                                              void IVoxSerializer.WriteRawObject(VoxWriter writer, object val) { TimeSpan v = (TimeSpan)val; WriteRaw(writer, ref v); }
                                                                                                                              object IVoxSerializer.ReadRawObject(VoxReader reader) => ReadRaw(reader);
                                                                                                                           }
               


                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class VoxGenerated_TimeSpanStatics {
                                                                                                                              public static void WriteFullTimeSpan(this VoxWriter writer, TimeSpan value) { var copy = value; TimeSpanSerializer.Instance.WriteFull(writer, ref value); }
                                                                                                                              public static void WriteRawTimeSpan(this VoxWriter writer, TimeSpan value) { var copy = value; TimeSpanSerializer.Instance.WriteRaw(writer, ref value); }
                                                                                                                              public static TimeSpan ReadFullTimeSpan(this VoxReader reader) => TimeSpanSerializer.Instance.ReadFull(reader);
                                                                                                                              public static TimeSpan ReadRawTimeSpan(this VoxReader reader) => TimeSpanSerializer.Instance.ReadRaw(reader);
                                                                                                                           }
                                                                                                                        }

                                                                                                                        namespace Dargon.Vox2 {
               

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static partial class VoxGeneration_TimeSpan {
                                                                                                                              public static partial void Stub_WriteRaw_TimeSpan(VoxWriter writer, TimeSpan value);
public static partial TimeSpan Stub_ReadRaw_TimeSpan(VoxReader reader);
                                                               
                                                                                                                           }

                                                                                                                        }

                                                                                                                        namespace System {
                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class TypeVoxConstants {
                                                                                                                              public const int SimpleTypeId = -2;
                                                                                                                              public static TypeSerializer Serializer => TypeSerializer.Instance;
                                                                                                                              public static readonly byte[] SimpleTypeIdBytes = SimpleTypeId.ToVariableIntBytes();
                                                                                                                           }

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           [VoxType(TypeVoxConstants.SimpleTypeId, VanityRedirectFromType = typeof(Dargon.Vox2.VoxGeneration_Type))]
                                                                                                                           public sealed partial class TypeSerializer : IVoxSerializer<Type> {
                                                                                                                              public static readonly TypeSerializer Instance = new();

                                                                                                                              public int SimpleTypeId => TypeVoxConstants.SimpleTypeId;
                                                                                                                              public int[] FullTypeId { get; } = new[] { TypeVoxConstants.SimpleTypeId };
                                                                                                                              public byte[] FullTypeIdBytes { get; } = TypeVoxConstants.SimpleTypeIdBytes;

                                                                                                                              public bool IsUpdatable => false;

                                                                                                                              public void WriteTypeIdBytes(VoxWriter writer) => writer.WriteTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void AssertReadTypeId(VoxReader reader) => reader.AssertReadTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void WriteFull(VoxWriter writer, ref Type self) { TypeSerializer.Instance.WriteTypeIdBytes(writer); WriteRaw(writer, ref self);
 }
                                                                                                                              public void WriteRaw(VoxWriter writer, ref Type self) { global::Dargon.Vox2.VoxGeneration_Type.Stub_WriteRaw_Type(writer, self);
 }
               

                                                                                                                              public Type ReadFull(VoxReader reader) { TypeSerializer.Instance.AssertReadTypeId(reader); return ReadRaw(reader);
 }
                                                                                                                              public Type ReadRaw(VoxReader reader) { return global::Dargon.Vox2.VoxGeneration_Type.Stub_ReadRaw_Type(reader);
 }
                                                                                                                              public void ReadFullIntoRef(VoxReader reader, ref Type self) => throw new InvalidOperationException("Reading into Type ref is not supported.");
                                                                                                                              public void ReadRawIntoRef(VoxReader reader, ref Type self) => throw new InvalidOperationException("Reading into Type ref is not supported.");
                  

                                                                                                                              void IVoxSerializer.WriteRawObject(VoxWriter writer, object val) { Type v = (Type)val; WriteRaw(writer, ref v); }
                                                                                                                              object IVoxSerializer.ReadRawObject(VoxReader reader) => ReadRaw(reader);
                                                                                                                           }
               


                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class VoxGenerated_TypeStatics {
                                                                                                                              public static void WriteFullType(this VoxWriter writer, Type value) { var copy = value; TypeSerializer.Instance.WriteFull(writer, ref value); }
                                                                                                                              public static void WriteRawType(this VoxWriter writer, Type value) { var copy = value; TypeSerializer.Instance.WriteRaw(writer, ref value); }
                                                                                                                              public static Type ReadFullType(this VoxReader reader) => TypeSerializer.Instance.ReadFull(reader);
                                                                                                                              public static Type ReadRawType(this VoxReader reader) => TypeSerializer.Instance.ReadRaw(reader);
                                                                                                                           }
                                                                                                                        }

                                                                                                                        namespace Dargon.Vox2 {
               

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static partial class VoxGeneration_Type {
                                                                                                                              public static partial void Stub_WriteRaw_Type(VoxWriter writer, Type value);
public static partial Type Stub_ReadRaw_Type(VoxReader reader);
                                                               
                                                                                                                           }

                                                                                                                        }
/* NoCodeGen flag specified for global::Dargon.Vox2.RuntimePolymorphicNullSerializer */
/* NoCodeGen flag specified for global::Dargon.Vox2.VoidThrowAlwaysSerializer */
/* NoCodeGen flag specified for global::Dargon.Vox2.ObjectThrowAlwaysSerializer */
/* NoCodeGen flag specified for global::Dargon.Vox2.RuntimePolymorphicArray1Serializer<T> */
/* NoCodeGen flag specified for global::Dargon.Vox2.RuntimePolymorphicListSerializer<T> */
/* NoCodeGen flag specified for global::Dargon.Vox2.RuntimePolymorphicHashSetSerializer<T> */
/* NoCodeGen flag specified for global::Dargon.Vox2.RuntimePolymorphicDictionarySerializer<K, V> */
