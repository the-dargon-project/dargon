
                                                                                                                        // <auto-generated/>
                                                                                                                        using System;
                                                                                                                        using Dargon.Commons;
                                                                                                                        using Dargon.Vox2;
                                                                                                                        

                                                                                                                        namespace Dargon.Vox2 {
                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class SimpleTestTypeVoxConstants {
                                                                                                                              public const int SimpleTypeId = -2147483647;
                                                                                                                              public static SimpleTestTypeSerializer Serializer => SimpleTestTypeSerializer.Instance;
                                                                                                                              public static readonly byte[] SimpleTypeIdBytes = SimpleTypeId.ToVariableIntBytes();
                                                                                                                           }

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           [VoxType(SimpleTestTypeVoxConstants.SimpleTypeId, VanityRedirectFromType = typeof(Dargon.Vox2.SimpleTestType))]
                                                                                                                           public sealed partial class SimpleTestTypeSerializer : IVoxSerializer<SimpleTestType> {
                                                                                                                              public static readonly SimpleTestTypeSerializer Instance = new();

                                                                                                                              public int SimpleTypeId => SimpleTestTypeVoxConstants.SimpleTypeId;
                                                                                                                              public int[] FullTypeId { get; } = new[] { SimpleTestTypeVoxConstants.SimpleTypeId };
                                                                                                                              public byte[] FullTypeIdBytes { get; } = SimpleTestTypeVoxConstants.SimpleTypeIdBytes;

                                                                                                                              public bool IsUpdatable => true;

                                                                                                                              public void WriteTypeIdBytes(VoxWriter writer) => writer.WriteTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void AssertReadTypeId(VoxReader reader) => reader.AssertReadTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void WriteFull(VoxWriter writer, ref SimpleTestType self) { SimpleTestTypeSerializer.Instance.WriteTypeIdBytes(writer); WriteRaw(writer, ref self);
 }
                                                                                                                              public void WriteRaw(VoxWriter writer, ref SimpleTestType self) { 
                                                                                                                                  {
writer.WriteRawInt32(self.i);

                                                                                                                                  }

                                                                                                                                  {
writer.WriteRawString(self.s);

                                                                                                                                  }
 }
               

                                                                                                                              public SimpleTestType ReadFull(VoxReader reader) { SimpleTestType res = new(); ReadFullIntoRef(reader, ref res); return res; }
                                                                                                                              public SimpleTestType ReadRaw(VoxReader reader) { SimpleTestType res = new(); ReadRawIntoRef(reader, ref res); return res; }
                                                                                                                              public void ReadFullIntoRef(VoxReader reader, ref SimpleTestType self) { SimpleTestTypeSerializer.Instance.AssertReadTypeId(reader); ReadRawIntoRef(reader, ref self);
 }
                                                                                                                              public void ReadRawIntoRef(VoxReader reader, ref SimpleTestType self) { if (self == null) throw new ArgumentNullException(nameof(SimpleTestType));

                                                                                                                                  {

                                                                                                                                     self.i = reader.ReadRawInt32();
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.s = reader.ReadRawString();
                                                                                                                                  }
 }
                  

                                                                                                                              void IVoxSerializer.WriteRawObject(VoxWriter writer, object val) { SimpleTestType v = (SimpleTestType)val; WriteRaw(writer, ref v); }
                                                                                                                              object IVoxSerializer.ReadRawObject(VoxReader reader) => ReadRaw(reader);
                                                                                                                           }
               

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public partial class SimpleTestType : IVoxCustomType<SimpleTestType> {
                                                                                                                              public SimpleTestTypeSerializer Serializer => SimpleTestTypeSerializer.Instance;
                                                                                                                              IVoxSerializer IVoxCustomType.Serializer => SimpleTestTypeSerializer.Instance;
                                                                                                                              IVoxSerializer<SimpleTestType> IVoxCustomType<SimpleTestType>.Serializer => SimpleTestTypeSerializer.Instance;

                                                                                                                              public void WriteFullInto(VoxWriter writer) { var copy = this; SimpleTestTypeSerializer.Instance.WriteFull(writer, ref copy); }
                                                                                                                              public void WriteRawInto(VoxWriter writer) { var copy = this; SimpleTestTypeSerializer.Instance.WriteRaw(writer, ref copy); }
                  

                                                                                                                              public void ReadFullFrom(VoxReader reader) { var copy = this; SimpleTestTypeSerializer.Instance.ReadFullIntoRef(reader, ref copy); }
                                                                                                                              public void ReadRawFrom(VoxReader reader) { var copy = this; SimpleTestTypeSerializer.Instance.ReadRawIntoRef(reader, ref copy); }
                     

                                                                                                                           }


                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class VoxGenerated_SimpleTestTypeStatics {
                                                                                                                              public static void WriteFullSimpleTestType(this VoxWriter writer, SimpleTestType value) { var copy = value; SimpleTestTypeSerializer.Instance.WriteFull(writer, ref value); }
                                                                                                                              public static void WriteRawSimpleTestType(this VoxWriter writer, SimpleTestType value) { var copy = value; SimpleTestTypeSerializer.Instance.WriteRaw(writer, ref value); }
                                                                                                                              public static SimpleTestType ReadFullSimpleTestType(this VoxReader reader) => SimpleTestTypeSerializer.Instance.ReadFull(reader);
                                                                                                                              public static SimpleTestType ReadRawSimpleTestType(this VoxReader reader) => SimpleTestTypeSerializer.Instance.ReadRaw(reader);
                                                                                                                           }
                                                                                                                        }

                                                                                                                        namespace Dargon.Vox2 {
               

                                                                                                                        }

                                                                                                                        namespace Dargon.Vox2 {
                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class HodgepodgeMinVoxConstants {
                                                                                                                              public const int SimpleTypeId = -2147483646;
                                                                                                                              public static HodgepodgeMinSerializer Serializer => HodgepodgeMinSerializer.Instance;
                                                                                                                              public static readonly byte[] SimpleTypeIdBytes = SimpleTypeId.ToVariableIntBytes();
                                                                                                                           }

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           [VoxType(HodgepodgeMinVoxConstants.SimpleTypeId, VanityRedirectFromType = typeof(Dargon.Vox2.HodgepodgeMin))]
                                                                                                                           public sealed partial class HodgepodgeMinSerializer : IVoxSerializer<HodgepodgeMin> {
                                                                                                                              public static readonly HodgepodgeMinSerializer Instance = new();

                                                                                                                              public int SimpleTypeId => HodgepodgeMinVoxConstants.SimpleTypeId;
                                                                                                                              public int[] FullTypeId { get; } = new[] { HodgepodgeMinVoxConstants.SimpleTypeId };
                                                                                                                              public byte[] FullTypeIdBytes { get; } = HodgepodgeMinVoxConstants.SimpleTypeIdBytes;

                                                                                                                              public bool IsUpdatable => true;

                                                                                                                              public void WriteTypeIdBytes(VoxWriter writer) => writer.WriteTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void AssertReadTypeId(VoxReader reader) => reader.AssertReadTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void WriteFull(VoxWriter writer, ref HodgepodgeMin self) { HodgepodgeMinSerializer.Instance.WriteTypeIdBytes(writer); WriteRaw(writer, ref self);
 }
                                                                                                                              public void WriteRaw(VoxWriter writer, ref HodgepodgeMin self) { 
                                                                                                                                  {
writer.WriteRawInt32(self.Int32);

                                                                                                                                  }

                                                                                                                                  {
writer.WriteRawString(self.String);

                                                                                                                                  }

                                                                                                                                  {
writer.WriteRawGuid(self.Guid);

                                                                                                                                  }

                                                                                                                                  {
var _voxvarname_arr = self.IntArray;
writer.WriteRawInt32(_voxvarname_arr.Length);
for (var _voxvarname_arr_i = 0; _voxvarname_arr_i < _voxvarname_arr.Length; _voxvarname_arr_i++) {
   writer.WriteRawInt32(_voxvarname_arr[_voxvarname_arr_i]);
}

                                                                                                                                  }

                                                                                                                                  {
var _voxvarname_dict = self.DictOfIntToArrayOfArrayOfDictOfStringToIntArray;
writer.WriteRawInt32(_voxvarname_dict.Count);
foreach (var _voxvarname_dict_kvp in _voxvarname_dict) {
   writer.WriteRawInt32(_voxvarname_dict_kvp.Key);
   var _voxvarname_dict_value_arr = _voxvarname_dict_kvp.Value;
   writer.WriteRawInt32(_voxvarname_dict_value_arr.Length);
   for (var _voxvarname_dict_value_arr_i = 0; _voxvarname_dict_value_arr_i < _voxvarname_dict_value_arr.Length; _voxvarname_dict_value_arr_i++) {
      var _voxvarname_dict_value_arr_el_arr = _voxvarname_dict_value_arr[_voxvarname_dict_value_arr_i];
      writer.WriteRawInt32(_voxvarname_dict_value_arr_el_arr.Length);
      for (var _voxvarname_dict_value_arr_el_arr_i = 0; _voxvarname_dict_value_arr_el_arr_i < _voxvarname_dict_value_arr_el_arr.Length; _voxvarname_dict_value_arr_el_arr_i++) {
         var _voxvarname_dict_value_arr_el_arr_el_dict = _voxvarname_dict_value_arr_el_arr[_voxvarname_dict_value_arr_el_arr_i];
         writer.WriteRawInt32(_voxvarname_dict_value_arr_el_arr_el_dict.Count);
         foreach (var _voxvarname_dict_value_arr_el_arr_el_dict_kvp in _voxvarname_dict_value_arr_el_arr_el_dict) {
            writer.WritePolymorphic<Object>(_voxvarname_dict_value_arr_el_arr_el_dict_kvp.Key);
            var _voxvarname_dict_value_arr_el_arr_el_dict_value_arr = _voxvarname_dict_value_arr_el_arr_el_dict_kvp.Value;
            writer.WriteRawInt32(_voxvarname_dict_value_arr_el_arr_el_dict_value_arr.Length);
            for (var _voxvarname_dict_value_arr_el_arr_el_dict_value_arr_i = 0; _voxvarname_dict_value_arr_el_arr_el_dict_value_arr_i < _voxvarname_dict_value_arr_el_arr_el_dict_value_arr.Length; _voxvarname_dict_value_arr_el_arr_el_dict_value_arr_i++) {
               writer.WriteRawInt32(_voxvarname_dict_value_arr_el_arr_el_dict_value_arr[_voxvarname_dict_value_arr_el_arr_el_dict_value_arr_i]);
            }
         }
      }
   }
}

                                                                                                                                  }

                                                                                                                                  {
writer.WritePolymorphic<Object>(self.PolymorphicString);

                                                                                                                                  }

                                                                                                                                  {
writer.WritePolymorphic<Object>(self.PolymorphicIntArray);

                                                                                                                                  }
 }
               

                                                                                                                              public HodgepodgeMin ReadFull(VoxReader reader) { HodgepodgeMin res = new(); ReadFullIntoRef(reader, ref res); return res; }
                                                                                                                              public HodgepodgeMin ReadRaw(VoxReader reader) { HodgepodgeMin res = new(); ReadRawIntoRef(reader, ref res); return res; }
                                                                                                                              public void ReadFullIntoRef(VoxReader reader, ref HodgepodgeMin self) { HodgepodgeMinSerializer.Instance.AssertReadTypeId(reader); ReadRawIntoRef(reader, ref self);
 }
                                                                                                                              public void ReadRawIntoRef(VoxReader reader, ref HodgepodgeMin self) { if (self == null) throw new ArgumentNullException(nameof(HodgepodgeMin));

                                                                                                                                  {

                                                                                                                                     self.Int32 = reader.ReadRawInt32();
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.String = reader.ReadRawString();
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.Guid = reader.ReadRawGuid();
                                                                                                                                  }

                                                                                                                                  {
var _voxvarname_arr_count = reader.ReadRawInt32();
var _voxvarname_arr = _voxvarname_arr_count == -1 ? null : new int[_voxvarname_arr_count];
for (var _voxvarname_arr_i = 0; _voxvarname_arr_i < _voxvarname_arr_count; _voxvarname_arr_i++) {
   _voxvarname_arr[_voxvarname_arr_i] = reader.ReadRawInt32();
}

                                                                                                                                     self.IntArray = _voxvarname_arr;
                                                                                                                                  }

                                                                                                                                  {
var _voxvarname_dict_count = reader.ReadRawInt32();
var _voxvarname_dict = new System.Collections.Generic.Dictionary<int, System.Collections.Generic.Dictionary<object, int[]>[][]>(_voxvarname_dict_count);
for (var _voxvarname_dict_i = 0; _voxvarname_dict_i < _voxvarname_dict_count; _voxvarname_dict_i++) {
   var _voxvarname_dict_key = reader.ReadRawInt32();
   var _voxvarname_dict_val_arr_count = reader.ReadRawInt32();
   var _voxvarname_dict_val_arr = _voxvarname_dict_val_arr_count == -1 ? null : new System.Collections.Generic.Dictionary<object, int[]>[_voxvarname_dict_val_arr_count][];
   for (var _voxvarname_dict_val_arr_i = 0; _voxvarname_dict_val_arr_i < _voxvarname_dict_val_arr_count; _voxvarname_dict_val_arr_i++) {
      var _voxvarname_dict_val_arr_el_arr_count = reader.ReadRawInt32();
      var _voxvarname_dict_val_arr_el_arr = _voxvarname_dict_val_arr_el_arr_count == -1 ? null : new System.Collections.Generic.Dictionary<object, int[]>[_voxvarname_dict_val_arr_el_arr_count];
      for (var _voxvarname_dict_val_arr_el_arr_i = 0; _voxvarname_dict_val_arr_el_arr_i < _voxvarname_dict_val_arr_el_arr_count; _voxvarname_dict_val_arr_el_arr_i++) {
         var _voxvarname_dict_val_arr_el_arr_el_dict_count = reader.ReadRawInt32();
         var _voxvarname_dict_val_arr_el_arr_el_dict = new System.Collections.Generic.Dictionary<object, int[]>(_voxvarname_dict_val_arr_el_arr_el_dict_count);
         for (var _voxvarname_dict_val_arr_el_arr_el_dict_i = 0; _voxvarname_dict_val_arr_el_arr_el_dict_i < _voxvarname_dict_val_arr_el_arr_el_dict_count; _voxvarname_dict_val_arr_el_arr_el_dict_i++) {
            var _voxvarname_dict_val_arr_el_arr_el_dict_key = reader.ReadPolymorphic<Object>();
            var _voxvarname_dict_val_arr_el_arr_el_dict_val_arr_count = reader.ReadRawInt32();
            var _voxvarname_dict_val_arr_el_arr_el_dict_val_arr = _voxvarname_dict_val_arr_el_arr_el_dict_val_arr_count == -1 ? null : new int[_voxvarname_dict_val_arr_el_arr_el_dict_val_arr_count];
            for (var _voxvarname_dict_val_arr_el_arr_el_dict_val_arr_i = 0; _voxvarname_dict_val_arr_el_arr_el_dict_val_arr_i < _voxvarname_dict_val_arr_el_arr_el_dict_val_arr_count; _voxvarname_dict_val_arr_el_arr_el_dict_val_arr_i++) {
               _voxvarname_dict_val_arr_el_arr_el_dict_val_arr[_voxvarname_dict_val_arr_el_arr_el_dict_val_arr_i] = reader.ReadRawInt32();
            }
            var _voxvarname_dict_val_arr_el_arr_el_dict_val = _voxvarname_dict_val_arr_el_arr_el_dict_val_arr;
            _voxvarname_dict_val_arr_el_arr_el_dict.Add(_voxvarname_dict_val_arr_el_arr_el_dict_key, _voxvarname_dict_val_arr_el_arr_el_dict_val);
         }
         _voxvarname_dict_val_arr_el_arr[_voxvarname_dict_val_arr_el_arr_i] = _voxvarname_dict_val_arr_el_arr_el_dict;
      }
      _voxvarname_dict_val_arr[_voxvarname_dict_val_arr_i] = _voxvarname_dict_val_arr_el_arr;
   }
   var _voxvarname_dict_val = _voxvarname_dict_val_arr;
   _voxvarname_dict.Add(_voxvarname_dict_key, _voxvarname_dict_val);
}

                                                                                                                                     self.DictOfIntToArrayOfArrayOfDictOfStringToIntArray = _voxvarname_dict;
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.PolymorphicString = reader.ReadPolymorphic<Object>();
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.PolymorphicIntArray = reader.ReadPolymorphic<Object>();
                                                                                                                                  }
 }
                  

                                                                                                                              void IVoxSerializer.WriteRawObject(VoxWriter writer, object val) { HodgepodgeMin v = (HodgepodgeMin)val; WriteRaw(writer, ref v); }
                                                                                                                              object IVoxSerializer.ReadRawObject(VoxReader reader) => ReadRaw(reader);
                                                                                                                           }
               

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public partial class HodgepodgeMin : IVoxCustomType<HodgepodgeMin> {
                                                                                                                              public HodgepodgeMinSerializer Serializer => HodgepodgeMinSerializer.Instance;
                                                                                                                              IVoxSerializer IVoxCustomType.Serializer => HodgepodgeMinSerializer.Instance;
                                                                                                                              IVoxSerializer<HodgepodgeMin> IVoxCustomType<HodgepodgeMin>.Serializer => HodgepodgeMinSerializer.Instance;

                                                                                                                              public void WriteFullInto(VoxWriter writer) { var copy = this; HodgepodgeMinSerializer.Instance.WriteFull(writer, ref copy); }
                                                                                                                              public void WriteRawInto(VoxWriter writer) { var copy = this; HodgepodgeMinSerializer.Instance.WriteRaw(writer, ref copy); }
                  

                                                                                                                              public void ReadFullFrom(VoxReader reader) { var copy = this; HodgepodgeMinSerializer.Instance.ReadFullIntoRef(reader, ref copy); }
                                                                                                                              public void ReadRawFrom(VoxReader reader) { var copy = this; HodgepodgeMinSerializer.Instance.ReadRawIntoRef(reader, ref copy); }
                     

                                                                                                                           }


                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class VoxGenerated_HodgepodgeMinStatics {
                                                                                                                              public static void WriteFullHodgepodgeMin(this VoxWriter writer, HodgepodgeMin value) { var copy = value; HodgepodgeMinSerializer.Instance.WriteFull(writer, ref value); }
                                                                                                                              public static void WriteRawHodgepodgeMin(this VoxWriter writer, HodgepodgeMin value) { var copy = value; HodgepodgeMinSerializer.Instance.WriteRaw(writer, ref value); }
                                                                                                                              public static HodgepodgeMin ReadFullHodgepodgeMin(this VoxReader reader) => HodgepodgeMinSerializer.Instance.ReadFull(reader);
                                                                                                                              public static HodgepodgeMin ReadRawHodgepodgeMin(this VoxReader reader) => HodgepodgeMinSerializer.Instance.ReadRaw(reader);
                                                                                                                           }
                                                                                                                        }

                                                                                                                        namespace Dargon.Vox2 {
               

                                                                                                                        }

                                                                                                                        namespace System {
                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class Int32VoxConstants {
                                                                                                                              public const int SimpleTypeId = -21;
                                                                                                                              public static Int32Serializer Serializer => Int32Serializer.Instance;
                                                                                                                              public static readonly byte[] SimpleTypeIdBytes = SimpleTypeId.ToVariableIntBytes();
                                                                                                                           }

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           [VoxType(Int32VoxConstants.SimpleTypeId, VanityRedirectFromType = typeof(Dargon.Vox2.VoxGeneration_Int32))]
                                                                                                                           public sealed partial class Int32Serializer : IVoxSerializer<Int32> {
                                                                                                                              public static readonly Int32Serializer Instance = new();

                                                                                                                              public int SimpleTypeId => Int32VoxConstants.SimpleTypeId;
                                                                                                                              public int[] FullTypeId { get; } = new[] { Int32VoxConstants.SimpleTypeId };
                                                                                                                              public byte[] FullTypeIdBytes { get; } = Int32VoxConstants.SimpleTypeIdBytes;

                                                                                                                              public bool IsUpdatable => false;

                                                                                                                              public void WriteTypeIdBytes(VoxWriter writer) => writer.WriteTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void AssertReadTypeId(VoxReader reader) => reader.AssertReadTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void WriteFull(VoxWriter writer, ref Int32 self) { Int32Serializer.Instance.WriteTypeIdBytes(writer); WriteRaw(writer, ref self);
 }
                                                                                                                              public void WriteRaw(VoxWriter writer, ref Int32 self) { global::Dargon.Vox2.VoxGeneration_Int32.Stub_WriteRaw_Int32(writer, self);
 }
               

                                                                                                                              public Int32 ReadFull(VoxReader reader) { Int32Serializer.Instance.AssertReadTypeId(reader); return ReadRaw(reader);
 }
                                                                                                                              public Int32 ReadRaw(VoxReader reader) { return global::Dargon.Vox2.VoxGeneration_Int32.Stub_ReadRaw_Int32(reader);
 }
                                                                                                                              public void ReadFullIntoRef(VoxReader reader, ref Int32 self) => throw new InvalidOperationException("Reading into Int32 ref is not supported.");
                                                                                                                              public void ReadRawIntoRef(VoxReader reader, ref Int32 self) => throw new InvalidOperationException("Reading into Int32 ref is not supported.");
                  

                                                                                                                              void IVoxSerializer.WriteRawObject(VoxWriter writer, object val) { Int32 v = (Int32)val; WriteRaw(writer, ref v); }
                                                                                                                              object IVoxSerializer.ReadRawObject(VoxReader reader) => ReadRaw(reader);
                                                                                                                           }
               


                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class VoxGenerated_Int32Statics {
                                                                                                                              public static void WriteFullInt32(this VoxWriter writer, Int32 value) { var copy = value; Int32Serializer.Instance.WriteFull(writer, ref value); }
                                                                                                                              public static void WriteRawInt32(this VoxWriter writer, Int32 value) { var copy = value; Int32Serializer.Instance.WriteRaw(writer, ref value); }
                                                                                                                              public static Int32 ReadFullInt32(this VoxReader reader) => Int32Serializer.Instance.ReadFull(reader);
                                                                                                                              public static Int32 ReadRawInt32(this VoxReader reader) => Int32Serializer.Instance.ReadRaw(reader);
                                                                                                                           }
                                                                                                                        }

                                                                                                                        namespace Dargon.Vox2 {
               

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static partial class VoxGeneration_Int32 {
                                                                                                                              public static partial void Stub_WriteRaw_Int32(VoxWriter writer, Int32 value);
public static partial Int32 Stub_ReadRaw_Int32(VoxReader reader);
                                                               
                                                                                                                           }

                                                                                                                        }

                                                                                                                        namespace System {
                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class StringVoxConstants {
                                                                                                                              public const int SimpleTypeId = -4;
                                                                                                                              public static StringSerializer Serializer => StringSerializer.Instance;
                                                                                                                              public static readonly byte[] SimpleTypeIdBytes = SimpleTypeId.ToVariableIntBytes();
                                                                                                                           }

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           [VoxType(StringVoxConstants.SimpleTypeId, VanityRedirectFromType = typeof(Dargon.Vox2.VoxGeneration_String))]
                                                                                                                           public sealed partial class StringSerializer : IVoxSerializer<String> {
                                                                                                                              public static readonly StringSerializer Instance = new();

                                                                                                                              public int SimpleTypeId => StringVoxConstants.SimpleTypeId;
                                                                                                                              public int[] FullTypeId { get; } = new[] { StringVoxConstants.SimpleTypeId };
                                                                                                                              public byte[] FullTypeIdBytes { get; } = StringVoxConstants.SimpleTypeIdBytes;

                                                                                                                              public bool IsUpdatable => false;

                                                                                                                              public void WriteTypeIdBytes(VoxWriter writer) => writer.WriteTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void AssertReadTypeId(VoxReader reader) => reader.AssertReadTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void WriteFull(VoxWriter writer, ref String self) { StringSerializer.Instance.WriteTypeIdBytes(writer); WriteRaw(writer, ref self);
 }
                                                                                                                              public void WriteRaw(VoxWriter writer, ref String self) { global::Dargon.Vox2.VoxGeneration_String.Stub_WriteRaw_String(writer, self);
 }
               

                                                                                                                              public String ReadFull(VoxReader reader) { StringSerializer.Instance.AssertReadTypeId(reader); return ReadRaw(reader);
 }
                                                                                                                              public String ReadRaw(VoxReader reader) { return global::Dargon.Vox2.VoxGeneration_String.Stub_ReadRaw_String(reader);
 }
                                                                                                                              public void ReadFullIntoRef(VoxReader reader, ref String self) => throw new InvalidOperationException("Reading into String ref is not supported.");
                                                                                                                              public void ReadRawIntoRef(VoxReader reader, ref String self) => throw new InvalidOperationException("Reading into String ref is not supported.");
                  

                                                                                                                              void IVoxSerializer.WriteRawObject(VoxWriter writer, object val) { String v = (String)val; WriteRaw(writer, ref v); }
                                                                                                                              object IVoxSerializer.ReadRawObject(VoxReader reader) => ReadRaw(reader);
                                                                                                                           }
               


                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class VoxGenerated_StringStatics {
                                                                                                                              public static void WriteFullString(this VoxWriter writer, String value) { var copy = value; StringSerializer.Instance.WriteFull(writer, ref value); }
                                                                                                                              public static void WriteRawString(this VoxWriter writer, String value) { var copy = value; StringSerializer.Instance.WriteRaw(writer, ref value); }
                                                                                                                              public static String ReadFullString(this VoxReader reader) => StringSerializer.Instance.ReadFull(reader);
                                                                                                                              public static String ReadRawString(this VoxReader reader) => StringSerializer.Instance.ReadRaw(reader);
                                                                                                                           }
                                                                                                                        }

                                                                                                                        namespace Dargon.Vox2 {
               

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static partial class VoxGeneration_String {
                                                                                                                              public static partial void Stub_WriteRaw_String(VoxWriter writer, String value);
public static partial String Stub_ReadRaw_String(VoxReader reader);
                                                               
                                                                                                                           }

                                                                                                                        }

                                                                                                                        namespace System {
                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class GuidVoxConstants {
                                                                                                                              public const int SimpleTypeId = -29;
                                                                                                                              public static GuidSerializer Serializer => GuidSerializer.Instance;
                                                                                                                              public static readonly byte[] SimpleTypeIdBytes = SimpleTypeId.ToVariableIntBytes();
                                                                                                                           }

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           [VoxType(GuidVoxConstants.SimpleTypeId, VanityRedirectFromType = typeof(Dargon.Vox2.VoxGeneration_Guid))]
                                                                                                                           public sealed partial class GuidSerializer : IVoxSerializer<Guid> {
                                                                                                                              public static readonly GuidSerializer Instance = new();

                                                                                                                              public int SimpleTypeId => GuidVoxConstants.SimpleTypeId;
                                                                                                                              public int[] FullTypeId { get; } = new[] { GuidVoxConstants.SimpleTypeId };
                                                                                                                              public byte[] FullTypeIdBytes { get; } = GuidVoxConstants.SimpleTypeIdBytes;

                                                                                                                              public bool IsUpdatable => false;

                                                                                                                              public void WriteTypeIdBytes(VoxWriter writer) => writer.WriteTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void AssertReadTypeId(VoxReader reader) => reader.AssertReadTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void WriteFull(VoxWriter writer, ref Guid self) { GuidSerializer.Instance.WriteTypeIdBytes(writer); WriteRaw(writer, ref self);
 }
                                                                                                                              public void WriteRaw(VoxWriter writer, ref Guid self) { global::Dargon.Vox2.VoxGeneration_Guid.Stub_WriteRaw_Guid(writer, self);
 }
               

                                                                                                                              public Guid ReadFull(VoxReader reader) { GuidSerializer.Instance.AssertReadTypeId(reader); return ReadRaw(reader);
 }
                                                                                                                              public Guid ReadRaw(VoxReader reader) { return global::Dargon.Vox2.VoxGeneration_Guid.Stub_ReadRaw_Guid(reader);
 }
                                                                                                                              public void ReadFullIntoRef(VoxReader reader, ref Guid self) => throw new InvalidOperationException("Reading into Guid ref is not supported.");
                                                                                                                              public void ReadRawIntoRef(VoxReader reader, ref Guid self) => throw new InvalidOperationException("Reading into Guid ref is not supported.");
                  

                                                                                                                              void IVoxSerializer.WriteRawObject(VoxWriter writer, object val) { Guid v = (Guid)val; WriteRaw(writer, ref v); }
                                                                                                                              object IVoxSerializer.ReadRawObject(VoxReader reader) => ReadRaw(reader);
                                                                                                                           }
               


                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class VoxGenerated_GuidStatics {
                                                                                                                              public static void WriteFullGuid(this VoxWriter writer, Guid value) { var copy = value; GuidSerializer.Instance.WriteFull(writer, ref value); }
                                                                                                                              public static void WriteRawGuid(this VoxWriter writer, Guid value) { var copy = value; GuidSerializer.Instance.WriteRaw(writer, ref value); }
                                                                                                                              public static Guid ReadFullGuid(this VoxReader reader) => GuidSerializer.Instance.ReadFull(reader);
                                                                                                                              public static Guid ReadRawGuid(this VoxReader reader) => GuidSerializer.Instance.ReadRaw(reader);
                                                                                                                           }
                                                                                                                        }

                                                                                                                        namespace Dargon.Vox2 {
               

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static partial class VoxGeneration_Guid {
                                                                                                                              public static partial void Stub_WriteRaw_Guid(VoxWriter writer, Guid value);
public static partial Guid Stub_ReadRaw_Guid(VoxReader reader);
                                                               
                                                                                                                           }

                                                                                                                        }
/* NoCodeGen flag specified for global::Dargon.Vox2.RuntimePolymorphicArray1Serializer<T> */
