
                                                                                                                        // <auto-generated/>

                                                                                                                        using Dargon.Commons;

                                                                                                                        using Dargon.Courier.ManagementTier;

                                                                                                                        using Dargon.Courier.ManagementTier.Vox;

                                                                                                                        using Dargon.Vox2;

                                                                                                                        using System;

                                                                                                                        using System.Numerics;

                                                                                                                        namespace Dargon.Courier.ManagementTier {
                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           [VoxType(kTypeId, VanityRedirectFromType = typeof(ManagementObjectStateDto))]
                                                                                                                           public sealed partial class ManagementObjectStateDtoSerializer : IVoxSerializer<ManagementObjectStateDto> {
                                                                                                                              public const int kTypeId = 41;

                                                                                                                              private static ManagementObjectStateDtoSerializer s_instance;
                                                                                                                              public static ManagementObjectStateDtoSerializer GetInstance(VoxSerializerContainer vsc) => s_instance ??= new(vsc);
                                                                                                                              public static ManagementObjectStateDtoSerializer GetInstance(VoxContext vox) => GetInstance(vox.SerializerContainer);

                                                                                                                              

                                                                                                                              public ManagementObjectStateDtoSerializer(VoxSerializerContainer vsc) {
                                                                                                                                 

                                                                                                                                 SimpleTypeId = kTypeId;
                                                                                                                                 FullTypeId = new[] { kTypeId };
                                                                                                                                 FullTypeIdBytes = FullTypeId.ToVariableIntBytes();
                                                                                                                              }

                                                                                                                              public int SimpleTypeId { get; }
                                                                                                                              public int[] FullTypeId { get; }
                                                                                                                              public byte[] FullTypeIdBytes { get; }

                                                                                                                              public bool IsUpdatable => true;

                                                                                                                              public void WriteTypeIdBytes(VoxWriter writer) => writer.WriteTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void AssertReadTypeId(VoxReader reader) => reader.AssertReadTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void WriteFull(VoxWriter writer, ref ManagementObjectStateDto self) { ManagementObjectStateDtoSerializer.GetInstance(writer.Context).WriteTypeIdBytes(writer); WriteRaw(writer, ref self);
 }
                                                                                                                              public void WriteRaw(VoxWriter writer, ref ManagementObjectStateDto self) { 
                                                                                                                                  {
var _voxvarname_arr = self.Methods;
if (_voxvarname_arr == null) {
   writer.WriteRawInt32((int)-1);
} else {
   writer.WriteRawInt32(_voxvarname_arr.Count);
   foreach (var _voxvarname_arr_el in _voxvarname_arr) {
      writer.WriteRawMethodDescriptionDto(_voxvarname_arr_el);
   }
}

                                                                                                                                  }

                                                                                                                                  {
var _voxvarname_arr = self.Properties;
if (_voxvarname_arr == null) {
   writer.WriteRawInt32((int)-1);
} else {
   writer.WriteRawInt32(_voxvarname_arr.Count);
   foreach (var _voxvarname_arr_el in _voxvarname_arr) {
      writer.WriteRawPropertyDescriptionDto(_voxvarname_arr_el);
   }
}

                                                                                                                                  }

                                                                                                                                  {
var _voxvarname_arr = self.DataSets;
if (_voxvarname_arr == null) {
   writer.WriteRawInt32((int)-1);
} else {
   writer.WriteRawInt32(_voxvarname_arr.Count);
   foreach (var _voxvarname_arr_el in _voxvarname_arr) {
      writer.WriteRawDataSetDescriptionDto(_voxvarname_arr_el);
   }
}

                                                                                                                                  }
 }
               

                                                                                                                              public ManagementObjectStateDto ReadFull(VoxReader reader) { ManagementObjectStateDto res = new(); ReadFullIntoRef(reader, ref res); return res; }
                                                                                                                              public ManagementObjectStateDto ReadRaw(VoxReader reader) { ManagementObjectStateDto res = new(); ReadRawIntoRef(reader, ref res); return res; }
                                                                                                                              public void ReadFullIntoRef(VoxReader reader, ref ManagementObjectStateDto self) { ManagementObjectStateDtoSerializer.GetInstance(reader.Context).AssertReadTypeId(reader); ReadRawIntoRef(reader, ref self);
 }
                                                                                                                              public void ReadRawIntoRef(VoxReader reader, ref ManagementObjectStateDto self) { if (self == null) throw new ArgumentNullException(nameof(ManagementObjectStateDto));

                                                                                                                                  {
var _voxvarname_arr_count = reader.ReadRawInt32();
var _voxvarname_arr = _voxvarname_arr_count == -1 ? null : new System.Collections.Generic.List<Dargon.Courier.ManagementTier.MethodDescriptionDto>(_voxvarname_arr_count);
for (var _voxvarname_arr_i = 0; _voxvarname_arr_i < _voxvarname_arr_count; _voxvarname_arr_i++) {
   _voxvarname_arr.Add(reader.ReadRawMethodDescriptionDto());
}

                                                                                                                                     self.Methods = _voxvarname_arr;
                                                                                                                                  }

                                                                                                                                  {
var _voxvarname_arr_count = reader.ReadRawInt32();
var _voxvarname_arr = _voxvarname_arr_count == -1 ? null : new System.Collections.Generic.List<Dargon.Courier.ManagementTier.Vox.PropertyDescriptionDto>(_voxvarname_arr_count);
for (var _voxvarname_arr_i = 0; _voxvarname_arr_i < _voxvarname_arr_count; _voxvarname_arr_i++) {
   _voxvarname_arr.Add(reader.ReadRawPropertyDescriptionDto());
}

                                                                                                                                     self.Properties = _voxvarname_arr;
                                                                                                                                  }

                                                                                                                                  {
var _voxvarname_arr_count = reader.ReadRawInt32();
var _voxvarname_arr = _voxvarname_arr_count == -1 ? null : new System.Collections.Generic.List<Dargon.Courier.ManagementTier.Vox.DataSetDescriptionDto>(_voxvarname_arr_count);
for (var _voxvarname_arr_i = 0; _voxvarname_arr_i < _voxvarname_arr_count; _voxvarname_arr_i++) {
   _voxvarname_arr.Add(reader.ReadRawDataSetDescriptionDto());
}

                                                                                                                                     self.DataSets = _voxvarname_arr;
                                                                                                                                  }
 }
                  

                                                                                                                              void IVoxSerializer.WriteRawObject(VoxWriter writer, object val) { ManagementObjectStateDto v = (ManagementObjectStateDto)val; WriteRaw(writer, ref v); }
                                                                                                                              object IVoxSerializer.ReadRawObject(VoxReader reader) => ReadRaw(reader);
                                                                                                                           }
               

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           [VoxInternalsAutoSerializedTypeInfoAttribute(GenericSerializerTypeDefinition = typeof(ManagementObjectStateDtoSerializer))]
                                                                                                                           public partial class ManagementObjectStateDto /* : IVoxCustomType<Dargon.Courier.ManagementTier.ManagementObjectStateDto> */ {
                                                                                                                              private static ManagementObjectStateDtoSerializer GetSerializerInstance(VoxContext vox) => ManagementObjectStateDtoSerializer.GetInstance(vox.SerializerContainer);
                                                                                                                              // public ManagementObjectStateDtoSerializer Serializer => ManagementObjectStateDtoSerializer.Instance;
                                                                                                                              // IVoxSerializer IVoxCustomType.Serializer => Serializer;
                                                                                                                              // IVoxSerializer<Dargon.Courier.ManagementTier.ManagementObjectStateDto> IVoxCustomType<Dargon.Courier.ManagementTier.ManagementObjectStateDto>.Serializer => Serializer;

                                                                                                                              public void WriteFullInto(VoxWriter writer) { var copy = this; GetSerializerInstance(writer.Context).WriteFull(writer, ref copy); }
                                                                                                                              public void WriteRawInto(VoxWriter writer) { var copy = this; GetSerializerInstance(writer.Context).WriteRaw(writer, ref copy); }
                  

                                                                                                                              public void ReadFullFrom(VoxReader reader) { var copy = this; GetSerializerInstance(reader.Context).ReadFullIntoRef(reader, ref copy); }
                                                                                                                              public void ReadRawFrom(VoxReader reader) { var copy = this; GetSerializerInstance(reader.Context).ReadRawIntoRef(reader, ref copy); }
                     

                                                                                                                           }


                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class VoxGenerated_ManagementObjectStateDtoStatics {
                                                                                                                              public static void WriteFullManagementObjectStateDto(this VoxWriter writer, Dargon.Courier.ManagementTier.ManagementObjectStateDto value) { var copy = value; ManagementObjectStateDtoSerializer.GetInstance(writer.Context).WriteFull(writer, ref value); }
                                                                                                                              public static void WriteRawManagementObjectStateDto(this VoxWriter writer, Dargon.Courier.ManagementTier.ManagementObjectStateDto value) { var copy = value; ManagementObjectStateDtoSerializer.GetInstance(writer.Context).WriteRaw(writer, ref value); }
                                                                                                                              public static ManagementObjectStateDto ReadFullManagementObjectStateDto(this VoxReader reader) => ManagementObjectStateDtoSerializer.GetInstance(reader.Context).ReadFull(reader);
                                                                                                                              public static ManagementObjectStateDto ReadRawManagementObjectStateDto(this VoxReader reader) => ManagementObjectStateDtoSerializer.GetInstance(reader.Context).ReadRaw(reader);
                                                                                                                           }
                                                                                                                        }

                                                                                                                        namespace Dargon.Courier.ManagementTier {
               

                                                                                                                        }
