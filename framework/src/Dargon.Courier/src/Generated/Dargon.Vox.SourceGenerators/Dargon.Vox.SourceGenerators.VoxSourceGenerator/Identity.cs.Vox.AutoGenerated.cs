
                                                                                                                        // <auto-generated/>

                                                                                                                        using Dargon.Commons;

                                                                                                                        using Dargon.Vox2;

                                                                                                                        using System;

                                                                                                                        using System.Numerics;

                                                                                                                        namespace Dargon.Courier {
                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           [VoxType(kTypeId, VanityRedirectFromType = typeof(Identity))]
                                                                                                                           public sealed partial class IdentitySerializer : IVoxSerializer<Identity> {
                                                                                                                              public const int kTypeId = 6;

                                                                                                                              private static IdentitySerializer s_instance;
                                                                                                                              public static IdentitySerializer GetInstance(VoxSerializerContainer vsc) => s_instance ??= new(vsc);
                                                                                                                              public static IdentitySerializer GetInstance(VoxContext vox) => GetInstance(vox.SerializerContainer);

                                                                                                                              

                                                                                                                              public IdentitySerializer(VoxSerializerContainer vsc) {
                                                                                                                                 

                                                                                                                                 SimpleTypeId = kTypeId;
                                                                                                                                 FullTypeId = new[] { kTypeId };
                                                                                                                                 FullTypeIdBytes = FullTypeId.ToVariableIntBytes();
                                                                                                                              }

                                                                                                                              public int SimpleTypeId { get; }
                                                                                                                              public int[] FullTypeId { get; }
                                                                                                                              public byte[] FullTypeIdBytes { get; }

                                                                                                                              public bool IsUpdatable => true;

                                                                                                                              public void WriteTypeIdBytes(VoxWriter writer) => writer.WriteTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void AssertReadTypeId(VoxReader reader) => reader.AssertReadTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void WriteFull(VoxWriter writer, ref Identity self) { IdentitySerializer.GetInstance(writer.Context).WriteTypeIdBytes(writer); WriteRaw(writer, ref self);
 }
                                                                                                                              public void WriteRaw(VoxWriter writer, ref Identity self) { 
                                                                                                                                  {
writer.WriteRawGuid(self.Id);

                                                                                                                                  }

                                                                                                                                  {
writer.WriteRawString(self.VanityName);

                                                                                                                                  }

                                                                                                                                  {
var _voxvarname_dict = self.DeclaredProperties;
if (_voxvarname_dict == null) {
   writer.WriteRawInt32((int)-1);
} else {
   writer.WriteRawInt32(_voxvarname_dict.Count);
   foreach (var _voxvarname_dict_kvp in _voxvarname_dict) {
      writer.WriteRawString(_voxvarname_dict_kvp.Key);
      writer.WritePolymorphic<object>(_voxvarname_dict_kvp.Value);
   }
}

                                                                                                                                  }
 }
               

                                                                                                                              public Identity ReadFull(VoxReader reader) { Identity res = new(); ReadFullIntoRef(reader, ref res); return res; }
                                                                                                                              public Identity ReadRaw(VoxReader reader) { Identity res = new(); ReadRawIntoRef(reader, ref res); return res; }
                                                                                                                              public void ReadFullIntoRef(VoxReader reader, ref Identity self) { IdentitySerializer.GetInstance(reader.Context).AssertReadTypeId(reader); ReadRawIntoRef(reader, ref self);
 }
                                                                                                                              public void ReadRawIntoRef(VoxReader reader, ref Identity self) { if (self == null) throw new ArgumentNullException(nameof(Identity));

                                                                                                                                  {

                                                                                                                                     self.Id = reader.ReadRawGuid();
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.VanityName = reader.ReadRawString();
                                                                                                                                  }

                                                                                                                                  {
var _voxvarname_dict_count = reader.ReadRawInt32();
var _voxvarname_dict = _voxvarname_dict_count == -1 ? null : new System.Collections.Concurrent.ConcurrentDictionary<string, object>();
for (var _voxvarname_dict_i = 0; _voxvarname_dict_i < _voxvarname_dict_count; _voxvarname_dict_i++) {
   var _voxvarname_dict_key = reader.ReadRawString();
   var _voxvarname_dict_val = reader.ReadPolymorphic<object>();
   _voxvarname_dict.TryAdd(_voxvarname_dict_key, _voxvarname_dict_val);
}

                                                                                                                                     self.DeclaredProperties = _voxvarname_dict;
                                                                                                                                  }
 }
                  

                                                                                                                              void IVoxSerializer.WriteRawObject(VoxWriter writer, object val) { Identity v = (Identity)val; WriteRaw(writer, ref v); }
                                                                                                                              object IVoxSerializer.ReadRawObject(VoxReader reader) => ReadRaw(reader);
                                                                                                                           }
               

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           [VoxInternalsAutoSerializedTypeInfoAttribute(GenericSerializerTypeDefinition = typeof(IdentitySerializer))]
                                                                                                                           public partial class Identity /* : IVoxCustomType<Dargon.Courier.Identity> */ {
                                                                                                                              /* can't put more here because of enums */
                                                                                                                           }


                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class VoxGenerated_IdentityStatics {
                                                                                                                              internal static IdentitySerializer GetSerializerInstance(VoxContext vox) => IdentitySerializer.GetInstance(vox.SerializerContainer);

                                                                                                                              public static void WriteFullIdentity(this VoxWriter writer, Dargon.Courier.Identity value) { var copy = value; GetSerializerInstance(writer.Context).WriteFull(writer, ref value); }
                                                                                                                              public static void WriteRawIdentity(this VoxWriter writer, Dargon.Courier.Identity value) { var copy = value; GetSerializerInstance(writer.Context).WriteRaw(writer, ref value); }
                                                                                                                              public static Identity ReadFullIdentity(this VoxReader reader) => GetSerializerInstance(reader.Context).ReadFull(reader);
                                                                                                                              public static Identity ReadRawIdentity(this VoxReader reader) => GetSerializerInstance(reader.Context).ReadRaw(reader);
            

                                                                                                                              public static void WriteFullInto(this Identity self, VoxWriter writer) { var copy = self; GetSerializerInstance(writer.Context).WriteFull(writer, ref copy); }
                                                                                                                              public static void WriteRawInto(this Identity self, VoxWriter writer) { var copy = self; GetSerializerInstance(writer.Context).WriteRaw(writer, ref copy); }
            

                                                                                                                              public static void ReadFullFrom( this Identity self, VoxReader reader) { var copy = self; GetSerializerInstance(reader.Context).ReadFullIntoRef(reader, ref copy); }
                                                                                                                              public static void ReadRawFrom( this Identity self, VoxReader reader) { var copy = self; GetSerializerInstance(reader.Context).ReadRawIntoRef(reader, ref copy); }
               


                                                                                                                           }
                                                                                                                        }

                                                                                                                        namespace Dargon.Courier {
               

                                                                                                                        }
