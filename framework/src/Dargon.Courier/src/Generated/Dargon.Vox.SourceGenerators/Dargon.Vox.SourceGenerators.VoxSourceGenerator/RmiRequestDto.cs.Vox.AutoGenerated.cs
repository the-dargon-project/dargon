
                                                                                                                        // <auto-generated/>

                                                                                                                        using Dargon.Commons;

                                                                                                                        using Dargon.Vox2;

                                                                                                                        using System;

                                                                                                                        using System.Numerics;

                                                                                                                        namespace Dargon.Courier.ServiceTier.Vox {
                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           [VoxType(kTypeId, VanityRedirectFromType = typeof(RmiRequestDto))]
                                                                                                                           public sealed partial class RmiRequestDtoSerializer : IVoxSerializer<RmiRequestDto> {
                                                                                                                              public const int kTypeId = 30;

                                                                                                                              private static RmiRequestDtoSerializer s_instance;
                                                                                                                              public static RmiRequestDtoSerializer GetInstance(VoxSerializerContainer vsc) => s_instance ??= new(vsc);
                                                                                                                              public static RmiRequestDtoSerializer GetInstance(VoxContext vox) => GetInstance(vox.SerializerContainer);

                                                                                                                              

                                                                                                                              public RmiRequestDtoSerializer(VoxSerializerContainer vsc) {
                                                                                                                                 

                                                                                                                                 SimpleTypeId = kTypeId;
                                                                                                                                 FullTypeId = new[] { kTypeId };
                                                                                                                                 FullTypeIdBytes = FullTypeId.ToVariableIntBytes();
                                                                                                                              }

                                                                                                                              public int SimpleTypeId { get; }
                                                                                                                              public int[] FullTypeId { get; }
                                                                                                                              public byte[] FullTypeIdBytes { get; }

                                                                                                                              public bool IsUpdatable => true;

                                                                                                                              public void WriteTypeIdBytes(VoxWriter writer) => writer.WriteTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void AssertReadTypeId(VoxReader reader) => reader.AssertReadTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void WriteFull(VoxWriter writer, ref RmiRequestDto self) { RmiRequestDtoSerializer.GetInstance(writer.Context).WriteTypeIdBytes(writer); WriteRaw(writer, ref self);
 }
                                                                                                                              public void WriteRaw(VoxWriter writer, ref RmiRequestDto self) { 
                                                                                                                                  {
writer.WriteRawGuid(self.InvocationId);

                                                                                                                                  }

                                                                                                                                  {
writer.WriteRawGuid(self.ServiceId);

                                                                                                                                  }

                                                                                                                                  {
writer.WriteRawString(self.MethodName);

                                                                                                                                  }

                                                                                                                                  {
var _voxvarname_arr = self.MethodGenericArguments;
if (_voxvarname_arr == null) {
   writer.WriteRawInt32((int)-1);
} else {
   writer.WriteRawInt32(_voxvarname_arr.Length);
   for (var _voxvarname_arr_i = 0; _voxvarname_arr_i < _voxvarname_arr.Length; _voxvarname_arr_i++) {
      writer.WriteRawType(_voxvarname_arr[_voxvarname_arr_i]);
   }
}

                                                                                                                                  }

                                                                                                                                  {
var _voxvarname_arr = self.MethodArguments;
if (_voxvarname_arr == null) {
   writer.WriteRawInt32((int)-1);
} else {
   writer.WriteRawInt32(_voxvarname_arr.Length);
   for (var _voxvarname_arr_i = 0; _voxvarname_arr_i < _voxvarname_arr.Length; _voxvarname_arr_i++) {
      writer.WritePolymorphic<object>(_voxvarname_arr[_voxvarname_arr_i]);
   }
}

                                                                                                                                  }
 }
               

                                                                                                                              public RmiRequestDto ReadFull(VoxReader reader) { RmiRequestDto res = new(); ReadFullIntoRef(reader, ref res); return res; }
                                                                                                                              public RmiRequestDto ReadRaw(VoxReader reader) { RmiRequestDto res = new(); ReadRawIntoRef(reader, ref res); return res; }
                                                                                                                              public void ReadFullIntoRef(VoxReader reader, ref RmiRequestDto self) { RmiRequestDtoSerializer.GetInstance(reader.Context).AssertReadTypeId(reader); ReadRawIntoRef(reader, ref self);
 }
                                                                                                                              public void ReadRawIntoRef(VoxReader reader, ref RmiRequestDto self) { if (self == null) throw new ArgumentNullException(nameof(RmiRequestDto));

                                                                                                                                  {

                                                                                                                                     self.InvocationId = reader.ReadRawGuid();
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.ServiceId = reader.ReadRawGuid();
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.MethodName = reader.ReadRawString();
                                                                                                                                  }

                                                                                                                                  {
var _voxvarname_arr_count = reader.ReadRawInt32();
var _voxvarname_arr = _voxvarname_arr_count == -1 ? null : new System.Type[_voxvarname_arr_count];
for (var _voxvarname_arr_i = 0; _voxvarname_arr_i < _voxvarname_arr_count; _voxvarname_arr_i++) {
   _voxvarname_arr[_voxvarname_arr_i] = reader.ReadRawType();
}

                                                                                                                                     self.MethodGenericArguments = _voxvarname_arr;
                                                                                                                                  }

                                                                                                                                  {
var _voxvarname_arr_count = reader.ReadRawInt32();
var _voxvarname_arr = _voxvarname_arr_count == -1 ? null : new object[_voxvarname_arr_count];
for (var _voxvarname_arr_i = 0; _voxvarname_arr_i < _voxvarname_arr_count; _voxvarname_arr_i++) {
   _voxvarname_arr[_voxvarname_arr_i] = reader.ReadPolymorphic<object>();
}

                                                                                                                                     self.MethodArguments = _voxvarname_arr;
                                                                                                                                  }
 }
                  

                                                                                                                              void IVoxSerializer.WriteRawObject(VoxWriter writer, object val) { RmiRequestDto v = (RmiRequestDto)val; WriteRaw(writer, ref v); }
                                                                                                                              object IVoxSerializer.ReadRawObject(VoxReader reader) => ReadRaw(reader);
                                                                                                                           }
               

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           [VoxInternalsAutoSerializedTypeInfoAttribute(GenericSerializerTypeDefinition = typeof(RmiRequestDtoSerializer))]
                                                                                                                           public partial class RmiRequestDto /* : IVoxCustomType<Dargon.Courier.ServiceTier.Vox.RmiRequestDto> */ {
                                                                                                                              /* can't put more here because of enums */
                                                                                                                           }

                                                                                                                        }

                                                                                                                        namespace Dargon.Courier.ServiceTier.Vox {

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class VoxGenerated_RmiRequestDtoStatics {
                                                                                                                              internal static RmiRequestDtoSerializer GetSerializerInstance(VoxContext vox) => RmiRequestDtoSerializer.GetInstance(vox.SerializerContainer);

                                                                                                                              public static void WriteFullRmiRequestDto(this VoxWriter writer, Dargon.Courier.ServiceTier.Vox.RmiRequestDto value) { var copy = value; GetSerializerInstance(writer.Context).WriteFull(writer, ref value); }
                                                                                                                              public static void WriteRawRmiRequestDto(this VoxWriter writer, Dargon.Courier.ServiceTier.Vox.RmiRequestDto value) { var copy = value; GetSerializerInstance(writer.Context).WriteRaw(writer, ref value); }
                                                                                                                              public static RmiRequestDto ReadFullRmiRequestDto(this VoxReader reader) => GetSerializerInstance(reader.Context).ReadFull(reader);
                                                                                                                              public static RmiRequestDto ReadRawRmiRequestDto(this VoxReader reader) => GetSerializerInstance(reader.Context).ReadRaw(reader);
            

                                                                                                                              public static void WriteFullInto(this RmiRequestDto self, VoxWriter writer) { var copy = self; GetSerializerInstance(writer.Context).WriteFull(writer, ref copy); }
                                                                                                                              public static void WriteRawInto(this RmiRequestDto self, VoxWriter writer) { var copy = self; GetSerializerInstance(writer.Context).WriteRaw(writer, ref copy); }
            

                                                                                                                              public static void ReadFullFrom( this RmiRequestDto self, VoxReader reader) { var copy = self; GetSerializerInstance(reader.Context).ReadFullIntoRef(reader, ref copy); }
                                                                                                                              public static void ReadRawFrom( this RmiRequestDto self, VoxReader reader) { var copy = self; GetSerializerInstance(reader.Context).ReadRawIntoRef(reader, ref copy); }
               


                                                                                                                           }
                                                                                                                        }

                                                                                                                        // Stubs
                                                                                                                        namespace Dargon.Courier.ServiceTier.Vox {
               

                                                                                                                        }

                                                                                                                        namespace Dargon.Courier.ServiceTier.Vox {
                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           [VoxType(kTypeId, VanityRedirectFromType = typeof(RmiResponseDto))]
                                                                                                                           public sealed partial class RmiResponseDtoSerializer : IVoxSerializer<RmiResponseDto> {
                                                                                                                              public const int kTypeId = 31;

                                                                                                                              private static RmiResponseDtoSerializer s_instance;
                                                                                                                              public static RmiResponseDtoSerializer GetInstance(VoxSerializerContainer vsc) => s_instance ??= new(vsc);
                                                                                                                              public static RmiResponseDtoSerializer GetInstance(VoxContext vox) => GetInstance(vox.SerializerContainer);

                                                                                                                              

                                                                                                                              public RmiResponseDtoSerializer(VoxSerializerContainer vsc) {
                                                                                                                                 

                                                                                                                                 SimpleTypeId = kTypeId;
                                                                                                                                 FullTypeId = new[] { kTypeId };
                                                                                                                                 FullTypeIdBytes = FullTypeId.ToVariableIntBytes();
                                                                                                                              }

                                                                                                                              public int SimpleTypeId { get; }
                                                                                                                              public int[] FullTypeId { get; }
                                                                                                                              public byte[] FullTypeIdBytes { get; }

                                                                                                                              public bool IsUpdatable => true;

                                                                                                                              public void WriteTypeIdBytes(VoxWriter writer) => writer.WriteTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void AssertReadTypeId(VoxReader reader) => reader.AssertReadTypeIdBytes(FullTypeIdBytes);
                                                                                                                              public void WriteFull(VoxWriter writer, ref RmiResponseDto self) { RmiResponseDtoSerializer.GetInstance(writer.Context).WriteTypeIdBytes(writer); WriteRaw(writer, ref self);
 }
                                                                                                                              public void WriteRaw(VoxWriter writer, ref RmiResponseDto self) { 
                                                                                                                                  {
writer.WriteRawGuid(self.InvocationId);

                                                                                                                                  }

                                                                                                                                  {
writer.WritePolymorphic<object>(self.ReturnValue);

                                                                                                                                  }

                                                                                                                                  {
var _voxvarname_arr = self.Outs;
if (_voxvarname_arr == null) {
   writer.WriteRawInt32((int)-1);
} else {
   writer.WriteRawInt32(_voxvarname_arr.Length);
   for (var _voxvarname_arr_i = 0; _voxvarname_arr_i < _voxvarname_arr.Length; _voxvarname_arr_i++) {
      writer.WritePolymorphic<object>(_voxvarname_arr[_voxvarname_arr_i]);
   }
}

                                                                                                                                  }

                                                                                                                                  {
writer.WritePolymorphic<object>(self.Exception);

                                                                                                                                  }
 }
               

                                                                                                                              public RmiResponseDto ReadFull(VoxReader reader) { RmiResponseDto res = new(); ReadFullIntoRef(reader, ref res); return res; }
                                                                                                                              public RmiResponseDto ReadRaw(VoxReader reader) { RmiResponseDto res = new(); ReadRawIntoRef(reader, ref res); return res; }
                                                                                                                              public void ReadFullIntoRef(VoxReader reader, ref RmiResponseDto self) { RmiResponseDtoSerializer.GetInstance(reader.Context).AssertReadTypeId(reader); ReadRawIntoRef(reader, ref self);
 }
                                                                                                                              public void ReadRawIntoRef(VoxReader reader, ref RmiResponseDto self) { if (self == null) throw new ArgumentNullException(nameof(RmiResponseDto));

                                                                                                                                  {

                                                                                                                                     self.InvocationId = reader.ReadRawGuid();
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.ReturnValue = reader.ReadPolymorphic<object>();
                                                                                                                                  }

                                                                                                                                  {
var _voxvarname_arr_count = reader.ReadRawInt32();
var _voxvarname_arr = _voxvarname_arr_count == -1 ? null : new object[_voxvarname_arr_count];
for (var _voxvarname_arr_i = 0; _voxvarname_arr_i < _voxvarname_arr_count; _voxvarname_arr_i++) {
   _voxvarname_arr[_voxvarname_arr_i] = reader.ReadPolymorphic<object>();
}

                                                                                                                                     self.Outs = _voxvarname_arr;
                                                                                                                                  }

                                                                                                                                  {

                                                                                                                                     self.Exception = reader.ReadPolymorphic<object>();
                                                                                                                                  }
 }
                  

                                                                                                                              void IVoxSerializer.WriteRawObject(VoxWriter writer, object val) { RmiResponseDto v = (RmiResponseDto)val; WriteRaw(writer, ref v); }
                                                                                                                              object IVoxSerializer.ReadRawObject(VoxReader reader) => ReadRaw(reader);
                                                                                                                           }
               

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           [VoxInternalsAutoSerializedTypeInfoAttribute(GenericSerializerTypeDefinition = typeof(RmiResponseDtoSerializer))]
                                                                                                                           public partial class RmiResponseDto /* : IVoxCustomType<Dargon.Courier.ServiceTier.Vox.RmiResponseDto> */ {
                                                                                                                              /* can't put more here because of enums */
                                                                                                                           }

                                                                                                                        }

                                                                                                                        namespace Dargon.Courier.ServiceTier.Vox {

                                                                                                                           /// <summary>Autogenerated</summary>
                                                                                                                           public static class VoxGenerated_RmiResponseDtoStatics {
                                                                                                                              internal static RmiResponseDtoSerializer GetSerializerInstance(VoxContext vox) => RmiResponseDtoSerializer.GetInstance(vox.SerializerContainer);

                                                                                                                              public static void WriteFullRmiResponseDto(this VoxWriter writer, Dargon.Courier.ServiceTier.Vox.RmiResponseDto value) { var copy = value; GetSerializerInstance(writer.Context).WriteFull(writer, ref value); }
                                                                                                                              public static void WriteRawRmiResponseDto(this VoxWriter writer, Dargon.Courier.ServiceTier.Vox.RmiResponseDto value) { var copy = value; GetSerializerInstance(writer.Context).WriteRaw(writer, ref value); }
                                                                                                                              public static RmiResponseDto ReadFullRmiResponseDto(this VoxReader reader) => GetSerializerInstance(reader.Context).ReadFull(reader);
                                                                                                                              public static RmiResponseDto ReadRawRmiResponseDto(this VoxReader reader) => GetSerializerInstance(reader.Context).ReadRaw(reader);
            

                                                                                                                              public static void WriteFullInto(this RmiResponseDto self, VoxWriter writer) { var copy = self; GetSerializerInstance(writer.Context).WriteFull(writer, ref copy); }
                                                                                                                              public static void WriteRawInto(this RmiResponseDto self, VoxWriter writer) { var copy = self; GetSerializerInstance(writer.Context).WriteRaw(writer, ref copy); }
            

                                                                                                                              public static void ReadFullFrom( this RmiResponseDto self, VoxReader reader) { var copy = self; GetSerializerInstance(reader.Context).ReadFullIntoRef(reader, ref copy); }
                                                                                                                              public static void ReadRawFrom( this RmiResponseDto self, VoxReader reader) { var copy = self; GetSerializerInstance(reader.Context).ReadRawIntoRef(reader, ref copy); }
               


                                                                                                                           }
                                                                                                                        }

                                                                                                                        // Stubs
                                                                                                                        namespace Dargon.Courier.ServiceTier.Vox {
               

                                                                                                                        }
